---
import Layout from '../layouts/Layout.astro';
import { galleryItems, categories } from '../data/gallery';

const title = "Shreyan Sengupta";
---

<Layout title={title}>
  <style>
    /* Dark Mode Variables (Default) */
    :root {
      --bg-primary: #000000;
      --bg-secondary: #000000;
      --text-primary: #ffffff;
      --text-secondary: #cccccc;
      --border-color: #1a1a1a;
      --card-bg: #000000;
      --card-border: #1a1a1a;
      --overlay-bg: rgba(0, 0, 0, 0.85);
      --filter-bg: rgba(0, 0, 0, 0.6);
      --filter-border: rgba(255, 255, 255, 0.08);
      --filter-hover-bg: rgba(0, 0, 0, 0.7);
      --shadow: rgba(0, 0, 0, 0.3);
      --lightbox-bg: rgba(0, 0, 0, 0.98);
      --lightbox-sidebar: #000000;
      --filter-text: #ffffff;
      --filter-text-secondary: #ffffff;
      --filter-active-bg: #ffffff;
      --filter-active-text: #000000;
    }

    /* Light Mode Variables (Explicit) */
    .light-theme {
      --bg-primary: #ffffff !important;
      --bg-secondary: #ffffff !important;
      --text-primary: #000000 !important;
      --text-secondary: #333333 !important;
      --border-color: #e0e0e0 !important;
      --card-bg: #ffffff !important;
      --card-border: #e0e0e0 !important;
      --overlay-bg: rgba(0, 0, 0, 0.75) !important;
      --filter-bg: rgba(255, 255, 255, 0.4) !important;
      --filter-border: rgba(0, 0, 0, 0.08) !important;
      --filter-hover-bg: rgba(255, 255, 255, 0.6) !important;
      --shadow: rgba(0, 0, 0, 0.12) !important;
      --lightbox-bg: rgba(0, 0, 0, 0.95) !important;
      --lightbox-sidebar: #ffffff !important;
      --filter-text: #ffffff !important;
      --filter-text-secondary: #ffffff !important;
      --filter-active-bg: #000000 !important;
      --filter-active-text: #ffffff !important;
    }

    /* Dark Mode Variables */
    .dark-theme {
      --bg-primary: #000000 !important;
      --bg-secondary: #000000 !important;
      --text-primary: #ffffff !important;
      --text-secondary: #cccccc !important;
      --border-color: #1a1a1a !important;
      --card-bg: #000000 !important;
      --card-border: #1a1a1a !important;
      --overlay-bg: rgba(0, 0, 0, 0.85) !important;
      --filter-bg: rgba(0, 0, 0, 0.7) !important;
      --filter-border: rgba(255, 255, 255, 0.1) !important;
      --filter-hover-bg: rgba(0, 0, 0, 0.8) !important;
      --shadow: rgba(0, 0, 0, 0.3) !important;
      --lightbox-bg: rgba(0, 0, 0, 0.98) !important;
      --lightbox-sidebar: #000000 !important;
      --filter-text: #ffffff !important;
      --filter-text-secondary: #ffffff !important;
      --filter-active-bg: #ffffff !important;
      --filter-active-text: #000000 !important;
    }

    /* Dark theme icon visibility */
    .light-icon {
      display: block;
    }

    .dark-icon {
      display: none;
    }

    .dark-theme .light-icon {
      display: none;
    }

    .dark-theme .dark-icon {
      display: block;
    }

    /* Theme-specific hover overrides for filter banner only */
    .light-theme .floating-filter:hover {
      background: var(--filter-hover-bg) !important;
    }

    .dark-theme .floating-filter:hover {
      background: var(--filter-hover-bg) !important;
    }

    /* Reset and Base Styles */
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    html {
      transition: background-color 0.3s ease, color 0.3s ease;
      scroll-behavior: smooth;
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
      background: var(--bg-primary);
      color: var(--text-primary);
      line-height: 1.4;
      overflow-x: hidden;
      transition: background-color 0.3s ease, color 0.3s ease;
    }

    /* Fixed Seamless Header */
    .header {
      position: fixed !important;
      top: 0 !important;
      left: 0 !important;
      right: 0 !important;
      width: 100% !important;
      z-index: 1000 !important;
      background: var(--bg-primary) !important;
      border-bottom: 1px solid var(--border-color);
      height: 60px;
      transition: all 0.3s ease;
      box-shadow: none;
    }


    .header-content {
      padding: 0 30px;
      height: 100%;
      display: flex;
      align-items: center;
      justify-content: center;
      position: relative;
      max-width: 1600px;
      margin: 0 auto;
    }

    .logo {
      font-size: 20px;
      font-weight: 600;
      color: var(--text-primary);
      text-decoration: none;
      position: absolute;
      left: 50%;
      transform: translateX(-50%);
    }

    /* Theme Toggle */
    .theme-toggle {
      background: none;
      border: none;
      color: var(--text-primary);
      font-size: 20px;
      cursor: pointer;
      padding: 10px;
      border-radius: 8px;
      transition: all 0.2s ease;
      position: absolute;
      right: 20px;
    }

    .theme-toggle:hover {
      background: var(--card-bg);
    }

    /* Main Content - Full Width */
    .main-content {
      margin-top: 60px;
      padding: 30px;
      padding-bottom: 100px;
      background: var(--bg-primary);
      min-height: calc(100vh - 60px);
      transition: background-color 0.3s ease;
    }

    /* Gallery Grid - 4:3 Aspect Ratio, Bigger Photos */
    .gallery-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
      gap: 25px;
      max-width: 1600px;
      margin: 0 auto;
      padding-bottom: 120px;
    }

    .gallery-item {
      position: relative;
      overflow: hidden;
      border-radius: 12px;
      cursor: pointer;
      transition: transform 0.3s ease, box-shadow 0.3s ease;
      background: var(--card-bg);
      border: 1px solid var(--card-border);
      aspect-ratio: 4/3;
    }

    .gallery-item:hover {
      transform: translateY(6px);
      box-shadow: 0 8px 25px var(--shadow);
    }

    .gallery-item img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      display: block;
      transition: transform 0.3s ease, opacity 0.4s ease;
      user-select: none;
      -webkit-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
      -webkit-user-drag: none;
      -khtml-user-drag: none;
      -moz-user-drag: none;
      -o-user-drag: none;
      user-drag: none;
      opacity: 0;
    }

    .gallery-item img.loaded {
      opacity: 1;
    }

    .gallery-item::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: linear-gradient(45deg, var(--card-bg) 25%, transparent 25%),
                  linear-gradient(-45deg, var(--card-bg) 25%, transparent 25%),
                  linear-gradient(45deg, transparent 75%, var(--card-bg) 75%),
                  linear-gradient(-45deg, transparent 75%, var(--card-bg) 75%);
      background-size: 20px 20px;
      background-position: 0 0, 0 10px, 10px -10px, -10px 0px;
      opacity: 0.1;
      pointer-events: none;
      transition: opacity 0.4s ease;
    }

    .gallery-item.loaded::before {
      opacity: 0;
    }

    .gallery-item:hover img {
      transform: scale(1.03);
    }

    /* Image Overlay - Hidden on Hover */
    .gallery-overlay {
      position: absolute;
      bottom: 0;
      left: 0;
      right: 0;
      background: linear-gradient(transparent, var(--overlay-bg));
      color: white;
      padding: 25px 20px 15px;
      opacity: 0;
      transition: opacity 0.3s;
      pointer-events: none;
    }

    .gallery-overlay h3 {
      font-size: 16px;
      font-weight: 600;
      margin-bottom: 5px;
    }

    .gallery-overlay p {
      font-size: 12px;
      text-transform: uppercase;
      letter-spacing: 0.5px;
      opacity: 0.9;
    }

    /* Full-screen Translucent Filter Banner - Bottom */
    .floating-filter {
      position: fixed;
      bottom: 0;
      left: 0;
      right: 0;
      width: 100%;
      z-index: 999;
      background: rgba(0, 0, 0, 0.2);
      backdrop-filter: blur(30px);
      -webkit-backdrop-filter: blur(30px);
      border-top: 1px solid rgba(255, 255, 255, 0.05);
      padding: 20px;
      display: flex;
      justify-content: center;
      gap: 12px;
      transition: all 0.3s ease;
    }

    .floating-filter:hover {
      background: rgba(0, 0, 0, 0.4);
      backdrop-filter: blur(35px);
      -webkit-backdrop-filter: blur(35px);
    }


    .filter-tab {
      padding: 10px 18px;
      background: transparent;
      border: none;
      border-radius: 20px;
      font-size: 13px;
      font-weight: 500;
      color: var(--filter-text-secondary);
      cursor: pointer;
      transition: all 0.2s ease;
      white-space: nowrap;
    }

    .filter-tab:hover {
      background: var(--card-bg);
      color: var(--filter-text);
    }

    .filter-tab.active {
      background: var(--filter-active-bg);
      color: var(--filter-active-text);
    }

    /* Lightbox */
    .lightbox {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: var(--lightbox-bg);
      z-index: 2000;
      display: none;
      backdrop-filter: blur(2px);
    }

    .lightbox.active {
      display: flex;
    }

    .lightbox-content {
      display: flex;
      width: 100%;
      height: 100%;
    }

    .lightbox-image-container {
      flex: 1;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 40px;
    }

    .lightbox-image {
      max-width: min(100%, 1500px);
      max-height: min(100%, 1000px);
      object-fit: contain;
      border-radius: 8px;
      user-select: none;
      -webkit-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
      -webkit-user-drag: none;
      -khtml-user-drag: none;
      -moz-user-drag: none;
      -o-user-drag: none;
      user-drag: none;
    }

    .lightbox-sidebar {
      width: 350px;
      background: var(--lightbox-sidebar);
      padding: 40px 30px;
      overflow-y: auto;
      border-left: 1px solid var(--border-color);
    }

    .lightbox-close {
      position: absolute;
      top: 20px;
      right: 20px;
      background: rgba(0, 0, 0, 0.6);
      border: 2px solid rgba(255, 255, 255, 0.3);
      color: white;
      font-size: 28px;
      font-weight: bold;
      cursor: pointer;
      padding: 8px 12px;
      border-radius: 50%;
      transition: all 0.2s ease;
      z-index: 2001;
      width: 44px;
      height: 44px;
      display: flex;
      align-items: center;
      justify-content: center;
      backdrop-filter: blur(4px);
    }

    .lightbox-close:hover {
      background: rgba(255, 255, 255, 0.2);
      border-color: rgba(255, 255, 255, 0.5);
      transform: scale(1.1);
    }

    .metadata-section {
      margin-bottom: 30px;
    }

    .metadata-title {
      font-size: 24px;
      font-weight: 700;
      margin-bottom: 8px;
      color: var(--text-primary);
    }

    .metadata-category {
      font-size: 14px;
      text-transform: uppercase;
      letter-spacing: 1px;
      color: var(--text-secondary);
      margin-bottom: 20px;
    }

    .metadata-item {
      display: flex;
      justify-content: space-between;
      padding: 12px 0;
      border-bottom: 1px solid var(--border-color);
    }

    .metadata-label {
      font-weight: 600;
      color: var(--text-primary);
    }

    .metadata-value {
      color: var(--text-secondary);
      text-align: right;
    }

    /* Navigation Arrows */
    .lightbox-nav {
      position: absolute;
      top: 50%;
      transform: translateY(-50%);
      background: rgba(255, 255, 255, 0.1);
      border: none;
      color: white;
      font-size: 24px;
      cursor: pointer;
      padding: 20px;
      border-radius: 8px;
      transition: background 0.2s ease;
    }

    .lightbox-nav:hover {
      background: rgba(255, 255, 255, 0.2);
    }

    .lightbox-prev {
      left: 20px;
    }

    .lightbox-next {
      right: 370px; /* Account for sidebar width */
    }

    /* Responsive Design */
    @media (max-width: 1024px) {
      .gallery-grid {
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 20px;
      }

      .lightbox-sidebar {
        width: 300px;
      }

      .lightbox-next {
        right: 320px;
      }
    }

    @media (max-width: 768px) {
      .main-content {
        padding: 20px;
        padding-bottom: 120px;
      }

      .gallery-grid {
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        gap: 18px;
      }

      .floating-filter {
        padding: 15px;
        flex-wrap: wrap;
        justify-content: center;
      }

      .filter-tab {
        padding: 8px 14px;
        font-size: 12px;
      }

      .lightbox-content {
        flex-direction: column;
      }

      .lightbox-sidebar {
        width: 100%;
        height: 40%;
        border-left: none;
        border-top: 1px solid var(--border-color);
      }

      .lightbox-image-container {
        height: 60%;
        padding: 20px;
      }

      .lightbox-nav {
        display: none;
      }
    }

    @media (max-width: 480px) {
      .gallery-grid {
        grid-template-columns: repeat(2, 1fr);
        gap: 15px;
      }

      .main-content {
        padding: 15px;
        padding-bottom: 100px;
      }

      .floating-filter {
        padding: 12px;
      }

      .filter-tab {
        padding: 6px 12px;
        font-size: 11px;
      }
    }

    /* Loading Animation */
    .gallery-item {
      animation: fadeInScale 0.6s ease-out;
    }

    @keyframes fadeInScale {
      from {
        opacity: 0;
        transform: scale(0.95);
      }
      to {
        opacity: 1;
        transform: scale(1);
      }
    }

    /* Hidden class for filtering */
    .hidden {
      display: none;
    }

    /* Focus states for accessibility */
    .filter-tab:focus,
    .gallery-item:focus {
      outline: 2px solid #007bff;
      outline-offset: 2px;
    }

    .theme-toggle:focus {
      outline: none;
    }

    /* Location and Time Display */
    .location-time {
      position: absolute;
      left: 30px;
      font-size: 16px;
      font-weight: 400;
      color: var(--text-primary);
      text-decoration: none;
    }

    /* Fix scroll gaps by ensuring background coverage */
    html {
      background: var(--bg-primary) !important;
    }

    /* Copyright Footer */
    .copyright-footer {
      background: var(--bg-primary);
      border-top: 1px solid var(--border-color);
      padding: 30px;
      text-align: center;
      margin-top: 50px;
    }

    .copyright-content {
      max-width: 1600px;
      margin: 0 auto;
    }

    .copyright-text {
      font-size: 12px;
      font-weight: 600;
      color: var(--text-primary);
      margin: 0 0 5px 0;
    }

    .legal-text {
      font-size: 10px;
      font-weight: 400;
      color: var(--text-secondary);
      margin: 0;
      line-height: 1.4;
    }

    /* Smooth transitions for theme changes */
    * {
      transition: background-color 0.3s ease, color 0.3s ease, border-color 0.3s ease;
    }

  </style>

  <!-- Minimal Header -->
  <header class="header">
    <div class="header-content">
      <div class="location-time" id="locationTime">Utrecht // 00:00:00</div>
      <a href="/" class="logo">{title}</a>
      <button class="theme-toggle" id="themeToggle" aria-label="Toggle theme">
        <span class="light-icon">☾</span>
        <span class="dark-icon">☀</span>
      </button>
    </div>
  </header>

  <!-- Main Content -->
  <main class="main-content">
    <!-- Gallery Grid - 4:3 Aspect Ratio -->
    <section class="gallery-grid">
      {galleryItems.map((item, index) => (
        <div class={`gallery-item ${index < 12 ? 'loaded' : ''}`} data-category={item.category} data-index={index} data-href={item.href} tabindex="0">
          <img
            src={index < 12 ? item.href : ''}
            data-src={item.href}
            alt={item.label}
            class={index < 12 ? 'loaded' : 'lazy-load'}
          />
          <div class="gallery-overlay">
            <h3>{item.label}</h3>
            <p>{item.category}</p>
          </div>
        </div>
      ))}
    </section>

    <!-- Copyright and Legal Notices -->
    <footer class="copyright-footer">
      <div class="copyright-content">
        <p class="copyright-text">© 2025 Shreyan Sengupta. All rights reserved. Text and data mining is not permitted.</p>
      </div>
    </footer>
  </main>

  <!-- Floating Filter Banner -->
  <div class="floating-filter">
    {categories.map((category) => (
      <button
        class={`filter-tab ${category.value === 'all' ? 'active' : ''}`}
        data-filter={category.value}
      >
        {category.label}
      </button>
    ))}
  </div>

  <!-- Lightbox -->
  <div class="lightbox" id="lightbox">
    <div class="lightbox-content">
      <div class="lightbox-image-container">
        <img class="lightbox-image" id="lightboxImage" src="" alt="">
        <button class="lightbox-close" id="lightboxClose">&times;</button>
        <button class="lightbox-nav lightbox-prev" id="lightboxPrev">‹</button>
        <button class="lightbox-nav lightbox-next" id="lightboxNext">›</button>
      </div>
      <div class="lightbox-sidebar">
        <div class="metadata-section">
          <h2 class="metadata-title" id="metadataTitle">Image Title</h2>
          <p class="metadata-category" id="metadataCategory">Category</p>
        </div>

        <div class="metadata-section">
          <div class="metadata-item">
            <span class="metadata-label">Camera</span>
            <span class="metadata-value" id="metadataCamera">Canon EOS R5</span>
          </div>
          <div class="metadata-item">
            <span class="metadata-label">Lens</span>
            <span class="metadata-value" id="metadataLens">24-70mm f/2.8</span>
          </div>
          <div class="metadata-item">
            <span class="metadata-label">Focal Length</span>
            <span class="metadata-value" id="metadataFocalLength">50mm</span>
          </div>
          <div class="metadata-item">
            <span class="metadata-label">Aperture</span>
            <span class="metadata-value" id="metadataAperture">f/2.8</span>
          </div>
          <div class="metadata-item">
            <span class="metadata-label">Shutter Speed</span>
            <span class="metadata-value" id="metadataShutterSpeed">1/250s</span>
          </div>
          <div class="metadata-item">
            <span class="metadata-label">ISO</span>
            <span class="metadata-value" id="metadataISO">400</span>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Pass gallery data to client-side -->
  <script type="application/json" id="gallery-data" set:html={JSON.stringify(galleryItems)}></script>

  <script>
    // Theme management - DIRECT STYLE APPROACH (WILL WORK!)
    function initTheme() {
      const themeToggle = document.getElementById('themeToggle');
      const root = document.documentElement;

      console.log('Theme system initializing...');

      // Define theme variables
      const lightTheme = {
        '--bg-primary': '#ffffff',
        '--bg-secondary': '#ffffff',
        '--text-primary': '#000000',
        '--text-secondary': '#333333',
        '--border-color': '#e0e0e0',
        '--card-bg': '#ffffff',
        '--card-border': '#e0e0e0',
        '--overlay-bg': 'rgba(0, 0, 0, 0.75)',
        '--filter-bg': 'rgba(255, 255, 255, 0.7)',
        '--filter-border': 'rgba(0, 0, 0, 0.1)',
        '--filter-hover-bg': 'rgba(255, 255, 255, 0.8)',
        '--shadow': 'rgba(0, 0, 0, 0.12)',
        '--lightbox-bg': 'rgba(0, 0, 0, 0.95)',
        '--lightbox-sidebar': '#ffffff',
        '--filter-text': '#ffffff',
        '--filter-text-secondary': '#ffffff',
        '--filter-active-bg': '#000000',
        '--filter-active-text': '#ffffff'
      };

      const darkTheme = {
        '--bg-primary': '#000000',
        '--bg-secondary': '#000000',
        '--text-primary': '#ffffff',
        '--text-secondary': '#cccccc',
        '--border-color': '#1a1a1a',
        '--card-bg': '#000000',
        '--card-border': '#1a1a1a',
        '--overlay-bg': 'rgba(0, 0, 0, 0.85)',
        '--filter-bg': 'rgba(0, 0, 0, 0.7)',
        '--filter-border': 'rgba(255, 255, 255, 0.1)',
        '--filter-hover-bg': 'rgba(0, 0, 0, 0.8)',
        '--shadow': 'rgba(0, 0, 0, 0.3)',
        '--lightbox-bg': 'rgba(0, 0, 0, 0.98)',
        '--lightbox-sidebar': '#000000',
        '--filter-text': '#ffffff',
        '--filter-text-secondary': '#ffffff',
        '--filter-active-bg': '#ffffff',
        '--filter-active-text': '#000000'
      };

      // Apply theme function
      function applyTheme(theme) {
        console.log('Applying theme:', theme);

        const themeVars = theme === 'dark' ? darkTheme : lightTheme;

        // Apply each CSS variable directly
        Object.entries(themeVars).forEach(([property, value]) => {
          root.style.setProperty(property, value);
          console.log(`Set ${property}: ${value}`);
        });

        // Toggle icon visibility
        const lightIcon = document.querySelector('.light-icon');
        const darkIcon = document.querySelector('.dark-icon');

        if (lightIcon && darkIcon) {
          if (theme === 'dark') {
            lightIcon.style.display = 'none';
            darkIcon.style.display = 'block';
          } else {
            lightIcon.style.display = 'block';
            darkIcon.style.display = 'none';
          }
        }

        localStorage.setItem('theme', theme);
        console.log('Theme applied successfully:', theme);
      }

      // Get saved theme or default to dark
      const savedTheme = localStorage.getItem('theme') || 'dark';
      console.log('Saved theme:', savedTheme);
      applyTheme(savedTheme);

      // Theme toggle event
      if (themeToggle) {
        let currentTheme = savedTheme;

        themeToggle.addEventListener('click', (e) => {
          e.preventDefault();
          console.log('Theme toggle clicked, current theme:', currentTheme);

          currentTheme = currentTheme === 'light' ? 'dark' : 'light';
          console.log('Switching to:', currentTheme);

          applyTheme(currentTheme);
        });
        console.log('Theme toggle event listener added');
      } else {
        console.error('Theme toggle button not found!');
      }
    }

    document.addEventListener('DOMContentLoaded', function() {
      // Load gallery data from JSON script tag
      const galleryDataScript = document.getElementById('gallery-data');
      window.galleryData = galleryDataScript ? JSON.parse(galleryDataScript.textContent) : [];

      initTheme();

      // Progressive Image Loading with Intersection Observer
      let imageObserver; // Declare in broader scope

      function initImageLoading() {
        imageObserver = new IntersectionObserver((entries, observer) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              const img = entry.target;
              const container = img.closest('.gallery-item');

              // Load the image
              img.src = img.dataset.src;

              // Add loaded state when image loads
              img.onload = () => {
                img.classList.add('loaded');
                container.classList.add('loaded');
              };

              // Handle load errors
              img.onerror = () => {
                img.classList.add('loaded'); // Still fade in to avoid blank space
                container.classList.add('loaded');
              };

              // Stop observing this image
              observer.unobserve(img);
            }
          });
        }, {
          // Load images when they're 100px from entering the viewport
          rootMargin: '100px',
          threshold: 0.01
        });

        // Observe all lazy-load images
        document.querySelectorAll('img.lazy-load').forEach(img => {
          imageObserver.observe(img);
        });

        console.log('Image loading observer initialized');
      }

      // Initialize progressive loading
      initImageLoading();

      // Utrecht time display
      function updateUtrechtTime() {
        try {
          const now = new Date();
          console.log('Current time:', now);

          const timeString = now.toLocaleTimeString('en-US', {
            timeZone: "Europe/Amsterdam",
            hour12: false,
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
          });

          console.log('Utrecht time string:', timeString);

          const locationElement = document.getElementById('locationTime');
          if (locationElement) {
            locationElement.textContent = `Utrecht // ${timeString}`;
            console.log('Updated element text to:', `Utrecht // ${timeString}`);
          } else {
            console.error('locationTime element not found');
          }
        } catch (error) {
          console.error('Error updating Utrecht time:', error);
          // Fallback to simple time display
          const locationElement = document.getElementById('locationTime');
          if (locationElement) {
            const now = new Date();
            const simpleTime = now.toTimeString().split(' ')[0];
            locationElement.textContent = `Utrecht // ${simpleTime}`;
          }
        }
      }

      // Update time immediately and then every second
      updateUtrechtTime();
      setInterval(updateUtrechtTime, 1000);

      // Dynamic filter sorting based on photo counts
      function sortFiltersByPhotoCount() {
        const galleryItems = document.querySelectorAll('.gallery-item');
        const filterContainer = document.querySelector('.floating-filter');
        const filterTabs = document.querySelectorAll('.filter-tab');

        // Count photos in each category
        const categoryCounts = {};

        // Initialize all categories with 0 count
        filterTabs.forEach(tab => {
          const filterValue = tab.getAttribute('data-filter');
          if (filterValue !== 'all') {
            categoryCounts[filterValue] = 0;
          }
        });

        // Count actual photos in each category
        galleryItems.forEach(item => {
          const category = item.getAttribute('data-category');
          if (category && categoryCounts.hasOwnProperty(category)) {
            categoryCounts[category]++;
          }
        });

        // Sort categories by count (descending)
        const sortedCategories = Object.entries(categoryCounts)
          .sort(([,a], [,b]) => b - a)
          .map(([category]) => category);

        // Get the "All" tab and remove all tabs from container
        const allTab = document.querySelector('.filter-tab[data-filter="all"]');
        const tabsToSort = Array.from(filterTabs).filter(tab =>
          tab.getAttribute('data-filter') !== 'all'
        );

        // Remove all tabs except "All"
        tabsToSort.forEach(tab => tab.remove());

        // Re-add tabs in sorted order
        sortedCategories.forEach(categoryValue => {
          const matchingTab = tabsToSort.find(tab =>
            tab.getAttribute('data-filter') === categoryValue
          );
          if (matchingTab) {
            filterContainer.appendChild(matchingTab);
          }
        });

        console.log('Filter tabs sorted by photo count:', categoryCounts);
      }

      // Apply dynamic sorting
      sortFiltersByPhotoCount();

      // Gallery and filter functionality
      const filterTabs = document.querySelectorAll('.filter-tab');
      const galleryItems = document.querySelectorAll('.gallery-item');

      // Lightbox elements
      const lightbox = document.getElementById('lightbox');
      const lightboxImage = document.getElementById('lightboxImage');
      const lightboxClose = document.getElementById('lightboxClose');
      const lightboxPrev = document.getElementById('lightboxPrev');
      const lightboxNext = document.getElementById('lightboxNext');

      // Metadata elements
      const metadataTitle = document.getElementById('metadataTitle');
      const metadataCategory = document.getElementById('metadataCategory');
      const metadataCamera = document.getElementById('metadataCamera');
      const metadataLens = document.getElementById('metadataLens');
      const metadataFocalLength = document.getElementById('metadataFocalLength');
      const metadataAperture = document.getElementById('metadataAperture');
      const metadataShutterSpeed = document.getElementById('metadataShutterSpeed');
      const metadataISO = document.getElementById('metadataISO');

      let currentImageIndex = 0;
      let visibleItems = [...galleryItems];


      // Filter functionality
      filterTabs.forEach(tab => {
        tab.addEventListener('click', () => {
          filterTabs.forEach(t => t.classList.remove('active'));
          tab.classList.add('active');

          const filterValue = tab.getAttribute('data-filter');
          visibleItems = [];

          if (filterValue === 'all') {
            // For "All" filter, show only items with category="all" (these are already deduplicated)
            console.log('Starting "All" filter - showing dedicated "all" category items');

            galleryItems.forEach((item) => {
              const itemCategory = item.getAttribute('data-category');

              if (itemCategory === 'all') {
                item.classList.remove('hidden');
                visibleItems.push(item);
                console.log('Showing "all" category item:', item.getAttribute('data-href'));
              } else {
                item.classList.add('hidden');
              }
            });
          } else {
            // For specific category filters, show all items in that category
            galleryItems.forEach((item, index) => {
              const itemCategory = item.getAttribute('data-category');

              if (itemCategory === filterValue) {
                item.classList.remove('hidden');
                visibleItems.push(item);
                // Remove animation delays to prevent blinking
                item.style.animation = 'none';
                item.offsetHeight;
                item.style.animation = 'fadeInScale 0.6s ease-out';
              } else {
                item.classList.add('hidden');
              }
            });
          }

          // Reinitialize image loading for newly visible images
          setTimeout(() => {
            const newLazyImages = document.querySelectorAll('.gallery-item:not(.hidden) img.lazy-load');
            newLazyImages.forEach(img => {
              if (!img.hasAttribute('data-observed')) {
                imageObserver.observe(img);
                img.setAttribute('data-observed', 'true');
              }
            });
          }, 100);
        });
      });

      // Lightbox functionality
      function openLightbox(index) {
        const item = visibleItems[index];
        const img = item.querySelector('img');
        const title = item.querySelector('h3').textContent;
        const category = item.querySelector('p').textContent;
        const originalIndex = parseInt(item.getAttribute('data-index')) || index;

        currentImageIndex = index;

        lightboxImage.src = img.src;
        lightboxImage.alt = img.alt;
        metadataTitle.textContent = title;
        metadataCategory.textContent = category.toUpperCase();

        // Get real metadata from gallery item
        const itemHref = item.getAttribute('data-href');
        const galleryItemData = window.galleryData.find(galleryItem => galleryItem.href === itemHref);

        if (galleryItemData && galleryItemData.metadata) {
          const metadata = galleryItemData.metadata;
          metadataCamera.textContent = metadata.camera;
          metadataLens.textContent = metadata.lens;
          metadataFocalLength.textContent = metadata.focalLength;
          metadataAperture.textContent = metadata.aperture;
          metadataShutterSpeed.textContent = metadata.shutterSpeed;
          metadataISO.textContent = metadata.iso;
        } else {
          // Fallback to default values if metadata not found
          metadataCamera.textContent = 'Unknown Camera';
          metadataLens.textContent = 'Unknown Lens';
          metadataFocalLength.textContent = 'Unknown';
          metadataAperture.textContent = 'Unknown';
          metadataShutterSpeed.textContent = 'Unknown';
          metadataISO.textContent = 'Unknown';
        }

        lightbox.classList.add('active');
        document.body.style.overflow = 'hidden';
      }

      function closeLightbox() {
        lightbox.classList.remove('active');
        document.body.style.overflow = 'auto';
      }

      function navigateLightbox(direction) {
        if (direction === 'next') {
          currentImageIndex = (currentImageIndex + 1) % visibleItems.length;
        } else {
          currentImageIndex = (currentImageIndex - 1 + visibleItems.length) % visibleItems.length;
        }
        openLightbox(currentImageIndex);
      }

      // Event listeners
      galleryItems.forEach((item, index) => {
        item.addEventListener('click', () => {
          const visibleIndex = visibleItems.indexOf(item);
          if (visibleIndex !== -1) {
            openLightbox(visibleIndex);
          }
        });
      });

      lightboxClose.addEventListener('click', closeLightbox);
      lightboxPrev.addEventListener('click', () => navigateLightbox('prev'));
      lightboxNext.addEventListener('click', () => navigateLightbox('next'));

      // Close lightbox on outside click
      lightbox.addEventListener('click', (e) => {
        if (e.target === lightbox) {
          closeLightbox();
        }
      });

      // Keyboard navigation
      document.addEventListener('keydown', (e) => {
        if (lightbox.classList.contains('active')) {
          if (e.key === 'Escape') {
            closeLightbox();
          } else if (e.key === 'ArrowLeft') {
            navigateLightbox('prev');
          } else if (e.key === 'ArrowRight') {
            navigateLightbox('next');
          }
        }
      });


      // Image protection - Gallery images
      const images = document.querySelectorAll('.gallery-item img');
      images.forEach(img => {
        img.addEventListener('contextmenu', e => e.preventDefault());
        img.addEventListener('dragstart', e => e.preventDefault());
        img.style.userSelect = 'none';
      });

      // Image protection - Lightbox image
      const lightboxImg = document.getElementById('lightboxImage');
      if (lightboxImg) {
        lightboxImg.addEventListener('contextmenu', e => e.preventDefault());
        lightboxImg.addEventListener('dragstart', e => e.preventDefault());
        lightboxImg.style.userSelect = 'none';
      }
    });
  </script>

  <!-- Simple time script without modules -->
  <script>
    // Simple time function without module dependencies
    function simpleTimeUpdate() {
      try {
        console.log('Simple time function running...');
        const now = new Date();
        const timeString = now.toLocaleTimeString('en-US', {
          timeZone: "Europe/Amsterdam",
          hour12: false,
          hour: '2-digit',
          minute: '2-digit',
          second: '2-digit'
        });

        const element = document.getElementById('locationTime');
        if (element) {
          element.textContent = `Utrecht // ${timeString}`;
          console.log('Time updated:', timeString);
        } else {
          console.log('Element not found');
        }
      } catch (error) {
        console.error('Time error:', error);
        const element = document.getElementById('locationTime');
        if (element) {
          const localTime = new Date().toTimeString().split(' ')[0];
          element.textContent = `Utrecht // ${localTime}`;
        }
      }
    }

    // Wait for DOM and run immediately
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', function() {
        simpleTimeUpdate();
        setInterval(simpleTimeUpdate, 1000);
      });
    } else {
      simpleTimeUpdate();
      setInterval(simpleTimeUpdate, 1000);
    }
  </script>
</Layout>