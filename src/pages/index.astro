---
import Layout from '../layouts/Layout.astro';
import { galleryItems, categories } from '../data/gallery';

const title = "Shreyan Sengupta";
const currentYear = new Date().getFullYear();
---

<Layout title={title}>
  <style is:global>
    /* Theme Variables - Dark Mode Default */
    :root {
      --bg-primary: #000000;
      --bg-secondary: #000000;
      --text-primary: #ffffff;
      --text-secondary: #cccccc;
      --border-color: #1a1a1a;
      --card-bg: #000000;
      --card-border: #1a1a1a;
      --overlay-bg: rgba(0, 0, 0, 0.85);
      --filter-bg: rgba(0, 0, 0, 0.2);
      --filter-border: rgba(255, 255, 255, 0.08);
      --filter-hover-bg: rgba(0, 0, 0, 0.35);
      --shadow: rgba(0, 0, 0, 0.3);
      --lightbox-bg: rgba(0, 0, 0, 0.98);
      --lightbox-sidebar: #000000;
      --filter-text: #ffffff;
      --filter-text-secondary: #ffffff;
      --filter-active-bg: #ffffff;
      --filter-active-text: #000000;
    }

    /* Light Mode Overrides */
    :root.light-theme {
      --bg-primary: #ffffff;
      --bg-secondary: #ffffff;
      --text-primary: #000000;
      --text-secondary: #333333;
      --border-color: #e0e0e0;
      --card-bg: #ffffff;
      --card-border: #e0e0e0;
      --filter-bg: rgba(255, 255, 255, 0.15);
      --filter-border: rgba(0, 0, 0, 0.08);
      --filter-hover-bg: rgba(255, 255, 255, 0.25);
      --shadow: rgba(0, 0, 0, 0.12);
      --lightbox-sidebar: #ffffff;
      --filter-active-bg: #000000;
      --filter-active-text: #ffffff;
    }

    /* Theme icon visibility */
    .light-icon {
      display: block;
    }

    .dark-icon {
      display: none;
    }

    :root.light-theme .dark-icon {
      display: block;
    }

    :root.light-theme .light-icon {
      display: none;
    }

    /* Reset and Base Styles */
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    html {
      background: var(--bg-primary);
      transition: background-color 0.3s ease, color 0.3s ease;
      scroll-behavior: smooth;
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      text-rendering: optimizeLegibility;
      position: relative;
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
      background: var(--bg-primary);
      color: var(--text-primary);
      line-height: 1.4;
      overflow-x: hidden;
      transition: background-color 0.3s ease, color 0.3s ease;
      position: relative;
    }

    /* Theme Transition Gradient Overlay */
    .theme-transition-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      pointer-events: none;
      z-index: 9999;
      opacity: 0;
      transition: opacity 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .theme-transition-overlay.active {
      opacity: 0.25;
    }

    .theme-transition-overlay.to-dark {
      background: linear-gradient(135deg,
        rgba(255, 255, 255, 0.95) 0%,
        rgba(230, 230, 235, 0.85) 20%,
        rgba(180, 180, 190, 0.75) 40%,
        rgba(100, 100, 110, 0.7) 60%,
        rgba(40, 40, 50, 0.85) 80%,
        rgba(0, 0, 0, 0.95) 100%);
    }

    .theme-transition-overlay.to-light {
      background: linear-gradient(135deg,
        rgba(0, 0, 0, 0.95) 0%,
        rgba(30, 30, 40, 0.85) 20%,
        rgba(80, 80, 90, 0.75) 40%,
        rgba(140, 140, 150, 0.7) 60%,
        rgba(200, 200, 210, 0.85) 80%,
        rgba(255, 255, 255, 0.95) 100%);
    }

    /* Fixed Seamless Header */
    .header {
      position: fixed !important;
      top: 0 !important;
      left: 0 !important;
      right: 0 !important;
      width: 100% !important;
      z-index: 1001 !important;
      background: var(--bg-primary) !important;
      border-bottom: none;
      height: 60px;
      transition: all 0.3s ease;
      box-shadow: none;
    }


    .header-content {
      padding: 0 30px;
      height: 100%;
      display: flex;
      align-items: center;
      justify-content: center;
      position: relative;
      max-width: 1600px;
      margin: 0 auto;
    }

    .logo {
      font-size: 20px;
      font-weight: 600;
      color: var(--text-primary);
      text-decoration: none;
      position: absolute;
      left: 50%;
      transform: translateX(-50%);
    }

    /* Header Controls */
    .header-controls {
      position: absolute;
      right: 20px;
      display: flex;
      align-items: center;
      gap: 8px;
    }

    /* Instagram Link */
    .instagram-link {
      background: none;
      border: none;
      color: var(--text-primary);
      font-size: 20px;
      cursor: pointer;
      padding: 10px;
      border-radius: 8px;
      transition: all 0.2s ease;
      text-decoration: none;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .instagram-link:hover {
      background: var(--card-bg);
      transform: scale(1.1);
    }

    /* Theme Toggle - Black & White Only */
    .theme-toggle {
      background: none;
      border: none;
      color: var(--text-primary);
      font-size: 20px;
      cursor: pointer;
      padding: 10px;
      border-radius: 8px;
      transition: all 0.2s ease;
      filter: none;
    }

    .theme-toggle:hover {
      background: var(--card-bg);
      transform: scale(1.1);
    }

    /* Ensure SVG icons are pure black or white */
    .theme-toggle svg {
      filter: none;
    }

    :root.light-theme .theme-toggle svg {
      color: #000000;
    }

    :root:not(.light-theme) .theme-toggle svg {
      color: #ffffff;
    }

    /* Shuffle Button */
    .shuffle-button {
      background: none;
      border: none;
      color: var(--text-primary);
      font-size: 20px;
      cursor: pointer;
      padding: 10px;
      border-radius: 8px;
      transition: all 0.2s ease;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .shuffle-button:hover {
      background: var(--card-bg);
      transform: scale(1.1);
    }

    .shuffle-button.shuffling svg {
      animation: rotate360 0.5s ease-in-out;
    }

    /* Enable SVG transformations on circles */
    .shuffle-button svg circle {
      transform-origin: center center;
      transform-box: fill-box;
    }

    /* Theme toggle animations - Squeeze Effect Only */
    .theme-toggle svg path {
      transform-origin: center center;
      transform-box: fill-box;
    }

    /* Exit animation - Pure squeeze effect */
    @keyframes exitIconAnimation {
      0% {
        transform: scaleX(1) scaleY(1);
        opacity: 1;
      }
      50% {
        transform: scaleX(0) scaleY(1.5);
        opacity: 0;
      }
      100% {
        transform: scaleX(0) scaleY(1.5);
        opacity: 0;
      }
    }

    /* Enter animation - Pure squeeze effect */
    @keyframes enterIconAnimation {
      0% {
        transform: scaleX(0) scaleY(1.5);
        opacity: 0;
      }
      50% {
        transform: scaleX(0) scaleY(1.5);
        opacity: 0;
      }
      100% {
        transform: scaleX(1) scaleY(1);
        opacity: 1;
      }
    }

    @keyframes rotate360 {
      from {
        transform: rotate(0deg);
      }
      to {
        transform: rotate(360deg);
      }
    }

    /* Bubble animations for shuffle dots - rise up and return from below */
    @keyframes bubble1 {
      0% {
        transform: translate(0, 0) scale(1);
        opacity: 1;
      }
      45% {
        transform: translate(-8px, -12px) scale(1.3);
        opacity: 0;
      }
      50% {
        transform: translate(-8px, 20px) scale(0.5);
        opacity: 0;
      }
      100% {
        transform: translate(0, 0) scale(1);
        opacity: 1;
      }
    }

    @keyframes bubble2 {
      0% {
        transform: translate(0, 0) scale(1);
        opacity: 1;
      }
      45% {
        transform: translate(10px, -15px) scale(1.5);
        opacity: 0;
      }
      50% {
        transform: translate(10px, 20px) scale(0.5);
        opacity: 0;
      }
      100% {
        transform: translate(0, 0) scale(1);
        opacity: 1;
      }
    }

    @keyframes bubble3 {
      0% {
        transform: translate(0, 0) scale(1);
        opacity: 1;
      }
      45% {
        transform: translate(-5px, -18px) scale(1.2);
        opacity: 0;
      }
      50% {
        transform: translate(-5px, 20px) scale(0.5);
        opacity: 0;
      }
      100% {
        transform: translate(0, 0) scale(1);
        opacity: 1;
      }
    }

    @keyframes bubble4 {
      0% {
        transform: translate(0, 0) scale(1);
        opacity: 1;
      }
      45% {
        transform: translate(12px, -10px) scale(1.4);
        opacity: 0;
      }
      50% {
        transform: translate(12px, 20px) scale(0.5);
        opacity: 0;
      }
      100% {
        transform: translate(0, 0) scale(1);
        opacity: 1;
      }
    }

    @keyframes bubble5 {
      0% {
        transform: translate(0, 0) scale(1);
        opacity: 1;
      }
      45% {
        transform: translate(-10px, -20px) scale(1.6);
        opacity: 0;
      }
      50% {
        transform: translate(-10px, 20px) scale(0.5);
        opacity: 0;
      }
      100% {
        transform: translate(0, 0) scale(1);
        opacity: 1;
      }
    }

    @keyframes bubble6 {
      0% {
        transform: translate(0, 0) scale(1);
        opacity: 1;
      }
      45% {
        transform: translate(9px, -14px) scale(1.3);
        opacity: 0;
      }
      50% {
        transform: translate(9px, 20px) scale(0.5);
        opacity: 0;
      }
      100% {
        transform: translate(0, 0) scale(1);
        opacity: 1;
      }
    }

    @keyframes bubble7 {
      0% {
        transform: translate(0, 0) scale(1);
        opacity: 1;
      }
      45% {
        transform: translate(-12px, -8px) scale(1.5);
        opacity: 0;
      }
      50% {
        transform: translate(-12px, 20px) scale(0.5);
        opacity: 0;
      }
      100% {
        transform: translate(0, 0) scale(1);
        opacity: 1;
      }
    }

    /* Main Content - Full Width */
    .main-content {
      margin-top: 60px;
      padding: 30px;
      padding-bottom: 100px;
      background: var(--bg-primary);
      min-height: calc(100vh - 60px);
      transition: background-color 0.3s ease;
      position: relative;
      z-index: 10;
    }

    /* Masonry/Brick Wall Gallery Layout */
    .gallery-grid {
      column-count: 3;
      column-gap: 25px;
      max-width: 1600px;
      margin: 0 auto;
      padding-bottom: 120px;
    }

    .gallery-item {
      position: relative;
      overflow: hidden;
      border-radius: 12px;
      cursor: pointer;
      transition: transform 0.3s ease, box-shadow 0.3s ease;
      background: var(--card-bg);
      border: 1px solid var(--card-border);
      width: 100%;
      display: inline-block;
      margin-bottom: 25px;
      break-inside: avoid;
    }

    /* Proper aspect ratios for different orientations - simplified */
    .gallery-item[data-orientation="portrait"] {
      aspect-ratio: 3/4;
    }

    .gallery-item[data-orientation="landscape"] {
      aspect-ratio: 4/3;
    }

    .gallery-item[data-orientation="square"] {
      aspect-ratio: 1/1;
    }

    .gallery-item:hover {
      transform: translateY(6px);
      box-shadow: 0 8px 25px var(--shadow);
    }

    .gallery-item img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      display: block;
      transition: transform 0.3s ease, opacity 0.4s ease;
      user-select: none;
      -webkit-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
      -webkit-user-drag: none;
      -khtml-user-drag: none;
      -moz-user-drag: none;
      -o-user-drag: none;
      user-drag: none;
      opacity: 0;
    }

    .gallery-item img.loaded {
      opacity: 1;
    }

    .gallery-item::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: linear-gradient(45deg, var(--card-bg) 25%, transparent 25%),
                  linear-gradient(-45deg, var(--card-bg) 25%, transparent 25%),
                  linear-gradient(45deg, transparent 75%, var(--card-bg) 75%),
                  linear-gradient(-45deg, transparent 75%, var(--card-bg) 75%);
      background-size: 20px 20px;
      background-position: 0 0, 0 10px, 10px -10px, -10px 0px;
      opacity: 0.1;
      pointer-events: none;
      transition: opacity 0.4s ease;
    }

    .gallery-item.loaded::before {
      opacity: 0;
    }

    .gallery-item:hover img {
      transform: scale(1.03);
    }

    /* Image Overlay - Hidden on Hover */
    .gallery-overlay {
      position: absolute;
      bottom: 0;
      left: 0;
      right: 0;
      background: linear-gradient(transparent, var(--overlay-bg));
      color: white;
      padding: 25px 20px 15px;
      opacity: 0;
      transition: opacity 0.3s;
      pointer-events: none;
    }

    .gallery-overlay h3 {
      font-size: 16px;
      font-weight: 600;
      margin-bottom: 5px;
    }

    .gallery-overlay p {
      font-size: 12px;
      text-transform: uppercase;
      letter-spacing: 0.5px;
      opacity: 0.9;
    }

    /* Full-screen Translucent Filter Banner - Bottom */
    .floating-filter {
      position: fixed;
      bottom: 0;
      left: 0;
      right: 0;
      width: 100%;
      z-index: 1000;
      background: linear-gradient(to bottom,
        transparent 0%,
        var(--filter-bg) 100%);
      backdrop-filter: blur(20px);
      -webkit-backdrop-filter: blur(20px);
      border-top: none;
      padding: 20px;
      display: flex;
      justify-content: center;
      gap: 12px;
      transition: all 0.3s ease;
    }

    .floating-filter:hover {
      background: linear-gradient(to bottom,
        transparent 0%,
        var(--filter-hover-bg) 100%);
      backdrop-filter: blur(20px);
      -webkit-backdrop-filter: blur(20px);
    }


    .filter-tab {
      padding: 10px 18px;
      background: transparent;
      border: none;
      border-radius: 20px;
      font-size: 13px;
      font-weight: 500;
      color: var(--filter-text-secondary);
      cursor: pointer;
      transition: all 0.2s ease;
      white-space: nowrap;
    }

    .filter-tab:hover {
      background: var(--card-bg);
      color: var(--filter-text);
    }

    .filter-tab.active {
      background: var(--filter-active-bg);
      color: var(--filter-active-text);
    }

    /* Lightbox */
    .lightbox {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: var(--lightbox-bg);
      z-index: 2000;
      display: none;
      backdrop-filter: blur(2px);
      overflow: hidden;
    }

    .lightbox.active {
      display: flex;
    }

    .lightbox-content {
      display: flex;
      width: 100%;
      height: 100%;
    }

    .lightbox-image-container {
      flex: 1;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 40px;
    }

    .lightbox-image {
      max-width: min(100%, 1500px);
      max-height: min(100%, 1000px);
      object-fit: contain;
      border-radius: 8px;
      user-select: none;
      -webkit-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
      -webkit-user-drag: none;
      -khtml-user-drag: none;
      -moz-user-drag: none;
      -o-user-drag: none;
      user-drag: none;
    }

    .lightbox-sidebar {
      width: 350px;
      background: var(--lightbox-sidebar);
      padding: 40px 30px;
      padding-top: 80px;
      padding-bottom: 80px;
      overflow-y: auto;
      border-left: 1px solid var(--border-color);
      position: relative;
    }

    .lightbox-close {
      position: absolute;
      top: 20px;
      right: 20px;
      background: rgba(0, 0, 0, 0.4);
      border: 1px solid rgba(255, 255, 255, 0.2);
      color: white;
      font-size: 20px;
      font-weight: 300;
      cursor: pointer;
      padding: 0;
      border-radius: 50%;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      z-index: 2001;
      width: 36px;
      height: 36px;
      display: flex;
      align-items: center;
      justify-content: center;
      backdrop-filter: blur(8px);
      opacity: 0.7;
    }

    .lightbox-close:hover {
      background: rgba(255, 255, 255, 0.15);
      border-color: rgba(255, 255, 255, 0.4);
      transform: scale(1.05);
      opacity: 1;
    }

    .metadata-section {
      margin-bottom: 12px;
    }

    .metadata-title {
      font-size: 20px;
      font-weight: 700;
      margin-bottom: 2px;
      color: var(--text-primary);
      line-height: 1.1;
    }

    .metadata-category {
      font-size: 11px;
      text-transform: uppercase;
      letter-spacing: 0.5px;
      color: var(--text-secondary);
      margin-bottom: 6px;
    }

    .metadata-item {
      display: flex;
      justify-content: space-between;
      padding: 5px 0;
      border-bottom: 1px solid var(--border-color);
    }

    .metadata-label {
      font-weight: 600;
      color: var(--text-primary);
      font-size: 13px;
    }

    .metadata-value {
      color: var(--text-secondary);
      text-align: right;
      font-size: 13px;
    }

    /* Description section */
    .description-section {
      margin-bottom: 20px;
      padding-bottom: 15px;
      border-bottom: 1px solid var(--border-color);
    }

    .description-section-label {
      font-size: 11px;
      font-weight: 600;
      color: var(--text-secondary);
      margin-bottom: 8px;
      text-transform: uppercase;
      letter-spacing: 1px;
    }

    .description-title {
      font-size: 16px;
      font-weight: 600;
      color: var(--text-primary);
      margin-bottom: 8px;
      font-style: italic;
    }

    .description-caption {
      font-size: 13px;
      line-height: 1.6;
      color: var(--text-secondary);
      margin: 0;
      white-space: pre-line;
      text-align: justify;
    }

    /* Copyright section - less prominent, positioned bottom right */
    .copyright-section {
      opacity: 0.5;
      position: absolute;
      bottom: 20px;
      right: 20px;
      margin: 0;
      text-align: right;
    }

    .copyright-section .metadata-item {
      padding: 4px 0;
      font-size: 10px;
      border-bottom: none;
      justify-content: flex-end;
    }

    .copyright-section .metadata-label {
      font-weight: 500;
      font-size: 9px;
      display: none;
    }

    .copyright-section .metadata-value {
      font-size: 10px;
      text-align: right;
    }

    /* Navigation Arrows */
    .lightbox-nav {
      position: absolute;
      top: 50%;
      transform: translateY(-50%);
      background: rgba(255, 255, 255, 0.05);
      border: 1px solid rgba(255, 255, 255, 0.15);
      color: rgba(255, 255, 255, 0.5);
      font-size: 24px;
      cursor: pointer;
      padding: 20px;
      border-radius: 8px;
      transition: all 0.3s ease;
      opacity: 0.6;
    }

    .lightbox-nav:hover {
      background: rgba(255, 255, 255, 0.15);
      color: rgba(255, 255, 255, 0.95);
      border-color: rgba(255, 255, 255, 0.3);
      opacity: 1;
      transform: translateY(-50%) scale(1.05);
    }

    .lightbox-prev {
      left: 20px;
    }

    .lightbox-next {
      right: 370px; /* Account for sidebar width */
    }

    /* Responsive Design */
    @media (max-width: 1024px) {
      .gallery-grid {
        column-count: 2;
        column-gap: 22px;
      }

      .lightbox-sidebar {
        width: 300px;
      }

      .lightbox-next {
        right: 320px;
      }
    }

    @media (max-width: 768px) {
      body {
        -webkit-overflow-scrolling: touch;
        overscroll-behavior: contain;
      }

      .main-content {
        padding: 20px;
        padding-bottom: calc(120px + env(safe-area-inset-bottom));
        min-height: calc(100vh - env(safe-area-inset-bottom));
      }

      .gallery-grid {
        column-count: 2;
        column-gap: 18px;
      }

      .gallery-item {
        margin-bottom: 18px;
      }

      .floating-filter {
        padding: 15px;
        flex-wrap: wrap;
        justify-content: center;
        background: var(--bg-primary) !important;
        backdrop-filter: none;
        -webkit-backdrop-filter: none;
      }

      .floating-filter:hover {
        background: var(--bg-primary) !important;
        backdrop-filter: none;
        -webkit-backdrop-filter: none;
      }

      .filter-tab {
        padding: 8px 14px;
        font-size: 12px;
      }

      .lightbox-content {
        flex-direction: column;
      }

      .lightbox-sidebar {
        width: 100%;
        height: 42%;
        max-height: 42%;
        border-left: none;
        border-top: 1px solid var(--border-color);
        padding: 15px 18px;
        padding-bottom: 15px;
        overflow-y: hidden;
        position: relative;
        display: flex;
        flex-direction: column;
      }

      .lightbox-sidebar > div {
        flex-shrink: 1;
      }

      .metadata-section {
        margin-bottom: 8px !important;
      }

      .metadata-item {
        padding: 4px 0 !important;
        font-size: 10px !important;
        line-height: 1.3 !important;
      }

      .metadata-label {
        font-size: 10px !important;
      }

      .metadata-value {
        font-size: 10px !important;
      }

      .description-section {
        margin-bottom: 8px !important;
        padding-bottom: 6px !important;
        max-height: 80px;
        overflow: hidden;
      }

      .description-title {
        font-size: 11px !important;
        margin-bottom: 4px !important;
      }

      .description-caption {
        font-size: 10px !important;
        line-height: 1.3 !important;
        max-height: 50px;
        overflow: hidden;
        text-overflow: ellipsis;
      }

      .copyright-section {
        position: static;
        margin-top: auto;
        padding-top: 8px;
        border-top: 1px solid var(--border-color);
        opacity: 0.5;
        text-align: center;
        flex-shrink: 0;
      }

      .copyright-section .metadata-item {
        justify-content: center;
        font-size: 8px !important;
        padding: 2px 0 !important;
      }

      .copyright-section .metadata-value {
        font-size: 8px !important;
        text-align: center;
        line-height: 1.2;
      }

      .lightbox-image-container {
        height: 58%;
        padding: 10px;
        overflow: hidden;
      }

      .lightbox-nav {
        display: none;
      }
    }

    @media (max-width: 480px) {
      .main-content {
        padding: 12px;
        padding-bottom: 110px;
      }

      .gallery-grid {
        column-count: 2;
        column-gap: 15px;
      }

      .gallery-item {
        margin-bottom: 15px;
        border-radius: 10px;
        -webkit-tap-highlight-color: transparent;
      }

      .gallery-item:hover {
        transform: none;
        box-shadow: 0 4px 15px var(--shadow);
      }

      .gallery-item:hover img {
        transform: none;
      }

      .floating-filter {
        padding: 12px 16px;
      }

      .filter-tab {
        padding: 6px 12px;
        font-size: 12px;
      }

      .lightbox-close {
        width: 40px;
        height: 40px;
        font-size: 18px;
        top: 15px;
        right: 15px;
      }

      .metadata-item {
        font-size: 11px;
        padding: 4px 0;
        line-height: 1.1;
      }

      .metadata-label {
        font-size: 11px;
        font-weight: 500;
      }

      .metadata-value {
        font-size: 11px;
      }

      .metadata-title {
        font-size: 18px;
        margin-bottom: 2px;
        line-height: 1.1;
      }

      .metadata-category {
        font-size: 10px;
        margin-bottom: 6px;
      }

      .metadata-section {
        margin-bottom: 10px;
      }

      .description-section {
        margin-bottom: 15px;
        padding-bottom: 10px;
      }

      .description-title {
        font-size: 12px;
        margin-bottom: 6px;
      }

      .description-caption {
        font-size: 11px;
        line-height: 1.5;
        white-space: pre-line;
        text-align: justify;
      }

      .lightbox-sidebar {
        padding: 12px 15px;
        padding-bottom: 12px;
        height: 43%;
        max-height: 43%;
      }

      .metadata-section {
        margin-bottom: 6px !important;
      }

      .metadata-item {
        padding: 3px 0 !important;
        font-size: 9px !important;
        line-height: 1.3 !important;
      }

      .metadata-label {
        font-size: 9px !important;
      }

      .metadata-value {
        font-size: 9px !important;
      }

      .description-section {
        margin-bottom: 6px !important;
        padding-bottom: 4px !important;
        max-height: 60px;
      }

      .description-title {
        font-size: 10px !important;
        margin-bottom: 3px !important;
      }

      .description-caption {
        font-size: 9px !important;
        line-height: 1.3 !important;
        max-height: 40px;
      }

      .copyright-section {
        padding-top: 6px;
      }

      .copyright-section .metadata-item {
        font-size: 7px !important;
        padding: 1px 0 !important;
      }

      .copyright-section .metadata-value {
        font-size: 7px !important;
      }

      .lightbox-image-container {
        height: 57%;
      }
    }

    @media (max-width: 360px) {
      .main-content {
        padding: 10px;
        padding-bottom: 100px;
      }

      .gallery-grid {
        column-count: 2;
        column-gap: 12px;
      }

      .gallery-item {
        margin-bottom: 12px;
        border-radius: 8px;
      }

      .floating-filter {
        padding: 10px 12px;
      }

      .filter-tab {
        padding: 5px 10px;
        font-size: 11px;
      }
    }

    /* Loading Animation */
    .gallery-item {
      animation: fadeInScale 0.6s ease-out;
    }

    @keyframes fadeInScale {
      from {
        opacity: 0;
        transform: scale(0.95);
      }
      to {
        opacity: 1;
        transform: scale(1);
      }
    }

    /* Hidden class for filtering */
    .hidden {
      display: none;
    }

    /* Focus states for accessibility */
    .filter-tab:focus,
    .gallery-item:focus {
      outline: 2px solid #007bff;
      outline-offset: 2px;
    }

    .theme-toggle:focus {
      outline: none;
    }

    /* Location and Time Display */
    .location-time {
      position: absolute;
      left: 30px;
      font-size: 16px;
      font-weight: 400;
      color: var(--text-primary);
      text-decoration: none;
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .location-time .location {
      margin: 0;
    }

    .location-time .time {
      margin: 0;
      font-variant-numeric: tabular-nums;
      letter-spacing: 0.05em;
    }

    /* Seconds styling - consistent with hours and minutes */
    .time-seconds {
      font-weight: 400;
      font-size: inherit;
      color: var(--text-primary);
      display: inline-block;
    }


    /* Mobile header layout fixes */
    @media (max-width: 768px) {
      .location-time {
        flex-direction: column;
        align-items: flex-start;
        gap: 2px;
        font-size: 14px;
        left: 20px;
      }

      .logo {
        font-size: 18px;
      }

      .header-controls {
        right: 15px;
        gap: 2px;
      }

      .instagram-link {
        font-size: 18px;
        padding: 8px;
      }

      .theme-toggle {
        font-size: 18px;
        padding: 8px;
      }

      .shuffle-button {
        font-size: 18px;
        padding: 8px;
      }
    }

    @media (max-width: 480px) {
      .location-time {
        font-size: 13px;
        left: 15px;
      }

      .logo {
        font-size: 16px;
      }

      .header-controls {
        right: 12px;
        gap: 0px;
      }

      .instagram-link {
        font-size: 16px;
        padding: 6px;
      }

      .theme-toggle {
        font-size: 16px;
        padding: 6px;
      }

      .shuffle-button {
        font-size: 16px;
        padding: 6px;
      }
    }

    /* Fix scroll gaps by ensuring background coverage */
    html {
      background: var(--bg-primary) !important;
    }

    /* Copyright Footer */
    .copyright-footer {
      background: var(--bg-primary);
      border-top: 1px solid var(--border-color);
      padding: 30px;
      text-align: center;
      margin-top: 50px;
    }

    .copyright-content {
      max-width: 1600px;
      margin: 0 auto;
    }

    .copyright-text {
      font-size: 12px;
      font-weight: 600;
      color: var(--text-primary);
      margin: 0 0 5px 0;
    }

    .legal-text {
      font-size: 10px;
      font-weight: 400;
      color: var(--text-secondary);
      margin: 0;
      line-height: 1.4;
    }

    /* Critical Performance Optimizations - Mobile Safe */
    /* Reduced motion preference support */
    @media (prefers-reduced-motion: reduce) {
      * {
        animation-duration: 0.01ms !important;
        animation-iteration-count: 1 !important;
        transition-duration: 0.01ms !important;
      }
    }

    /* Targeted transitions only - no universal selectors */
    .header,
    .theme-toggle,
    .instagram-link,
    .shuffle-button,
    .filter-tab,
    .floating-filter {
      transition: background-color 0.2s ease, color 0.2s ease, border-color 0.2s ease;
    }

    /* GPU acceleration for gallery items */
    .gallery-item {
      transform: translateZ(0);
      backface-visibility: hidden;
      -webkit-transform: translateZ(0);
      -webkit-backface-visibility: hidden;
    }

    /* Optimize scrolling performance */
    .main-content {
      -webkit-overflow-scrolling: touch;
      scroll-behavior: smooth;
      will-change: scroll-position;
      contain: layout style paint;
    }

    /* Critical image loading optimization */
    .gallery-item img {
      content-visibility: auto;
      contain-intrinsic-size: 300px 225px;
    }

    /* Fast hover transforms */
    .gallery-item:hover {
      transform: translateZ(0) translateY(6px);
    }

  </style>

  <!-- Theme Transition Overlay -->
  <div class="theme-transition-overlay" id="themeTransitionOverlay"></div>

  <!-- Minimal Header -->
  <header class="header">
    <div class="header-content">
      <div class="location-time" id="locationTime">
        <div class="location">Utrecht</div>
        <div class="time" id="timeDisplay">00:00:00</div>
      </div>
      <a href="/" class="logo">{title}</a>
      <div class="header-controls">
        <a href="https://www.instagram.com/rigeveryday/" class="instagram-link" id="instagramLink" target="_blank" rel="noopener noreferrer" aria-label="Visit Instagram">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <rect x="5" y="8" width="14" height="11" rx="0.5" stroke="currentColor" stroke-width="1.5" fill="none"/>
            <circle cx="12" cy="13.5" r="3.5" stroke="currentColor" stroke-width="1.5" fill="none"/>
            <rect x="8" y="5" width="8" height="3" rx="0.5" fill="currentColor"/>
            <rect x="15.5" y="9.5" width="2" height="2" rx="0.3" fill="currentColor"/>
            <circle cx="7.5" cy="10" r="0.6" fill="currentColor"/>
          </svg>
        </a>
        <button class="shuffle-button" id="shuffleButton" aria-label="Shuffle photos">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
            <circle cx="6" cy="6" r="2"></circle>
            <circle cx="18" cy="8" r="2"></circle>
            <circle cx="8" cy="12" r="2"></circle>
            <circle cx="16" cy="16" r="2"></circle>
            <circle cx="12" cy="20" r="2"></circle>
            <circle cx="20" cy="18" r="2"></circle>
            <circle cx="4" cy="16" r="2"></circle>
          </svg>
        </button>
        <button class="theme-toggle" id="themeToggle" aria-label="Toggle theme">
          <span class="light-icon">
            <svg width="18" height="18" viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
              <path d="M12 2.25a.75.75 0 01.75.75v2.25a.75.75 0 01-1.5 0V3a.75.75 0 01.75-.75zM7.5 12a4.5 4.5 0 119 0 4.5 4.5 0 01-9 0zM18.894 6.166a.75.75 0 00-1.06-1.06l-1.591 1.59a.75.75 0 101.06 1.061l1.591-1.59zM21.75 12a.75.75 0 01-.75.75h-2.25a.75.75 0 010-1.5H21a.75.75 0 01.75.75zM17.834 18.894a.75.75 0 001.06-1.06l-1.59-1.591a.75.75 0 10-1.061 1.06l1.59 1.591zM12 18a.75.75 0 01.75.75V21a.75.75 0 01-1.5 0v-2.25A.75.75 0 0112 18zM7.758 17.303a.75.75 0 00-1.061-1.06l-1.591 1.59a.75.75 0 001.06 1.061l1.591-1.59zM6 12a.75.75 0 01-.75.75H3a.75.75 0 010-1.5h2.25A.75.75 0 016 12zM6.697 7.757a.75.75 0 001.06-1.06l-1.59-1.591a.75.75 0 00-1.061 1.06l1.59 1.591z"/>
            </svg>
          </span>
          <span class="dark-icon" id="moonIcon">
            <svg width="18" height="18" viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
              <path d="M9.528 1.718a.75.75 0 01.162.819A8.97 8.97 0 009 6a9 9 0 009 9 8.97 8.97 0 003.463-.69.75.75 0 01.981.98 10.503 10.503 0 01-9.694 6.46c-5.799 0-10.5-4.701-10.5-10.5 0-4.368 2.667-8.112 6.46-9.694a.75.75 0 01.818.162z"/>
            </svg>
          </span>
        </button>
      </div>
    </div>
  </header>

  <!-- Main Content -->
  <main class="main-content">
    <!-- Gallery Grid - 4:3 Aspect Ratio -->
    <section class="gallery-grid">
      {galleryItems.map((item, index) => (
        <div
          class={`gallery-item ${index < 24 ? 'loaded' : ''}`}
          data-category={item.category}
          data-index={index}
          data-href={item.href}
          data-orientation={item.orientation || 'landscape'}
          tabindex="0"
        >
          <img
            src={index < 24 ? item.href : ''}
            data-src={item.href}
            alt={item.label}
            class={index < 24 ? 'loaded' : 'lazy-load'}
          />
          <div class="gallery-overlay">
            <h3>{item.label}</h3>
            <p>{item.category}</p>
          </div>
        </div>
      ))}
    </section>

    <!-- Copyright and Legal Notices -->
    <footer class="copyright-footer">
      <div class="copyright-content">
        <p class="copyright-text">© {currentYear} Shreyan Sengupta. All rights reserved. Text and data mining is not permitted.</p>
      </div>
    </footer>
  </main>

  <!-- Floating Filter Banner -->
  <div class="floating-filter">
    {categories.map((category) => (
      <button
        class={`filter-tab ${category.value === 'all' ? 'active' : ''}`}
        data-filter={category.value}
      >
        {category.label}
      </button>
    ))}
  </div>

  <!-- Lightbox -->
  <div class="lightbox" id="lightbox">
    <div class="lightbox-content">
      <div class="lightbox-image-container">
        <img class="lightbox-image" id="lightboxImage" src="" alt="">
        <button class="lightbox-close" id="lightboxClose">&times;</button>
        <button class="lightbox-nav lightbox-prev" id="lightboxPrev">‹</button>
        <button class="lightbox-nav lightbox-next" id="lightboxNext">›</button>
      </div>
      <div class="lightbox-sidebar">
        <div class="metadata-section description-section" id="descriptionSection" style="display: none;">
          <h4 class="description-title" id="descriptionTitle"></h4>
          <p class="description-caption" id="descriptionCaption"></p>
        </div>

        <div class="metadata-section">
          <div class="metadata-item">
            <span class="metadata-label">File Number #</span>
            <span class="metadata-value" id="metadataFileNumber">8413</span>
          </div>
          <div class="metadata-item">
            <span class="metadata-label">Category</span>
            <span class="metadata-value" id="metadataCategoryValue">All</span>
          </div>
          <div class="metadata-item">
            <span class="metadata-label">Camera</span>
            <span class="metadata-value" id="metadataCamera">Canon EOS R5</span>
          </div>
          <div class="metadata-item">
            <span class="metadata-label">Lens</span>
            <span class="metadata-value" id="metadataLens">24-70mm f/2.8</span>
          </div>
          <div class="metadata-item">
            <span class="metadata-label">Focal Length</span>
            <span class="metadata-value" id="metadataFocalLength">50mm</span>
          </div>
          <div class="metadata-item">
            <span class="metadata-label">Aperture</span>
            <span class="metadata-value" id="metadataAperture">f/2.8</span>
          </div>
          <div class="metadata-item">
            <span class="metadata-label">Shutter Speed</span>
            <span class="metadata-value" id="metadataShutterSpeed">1/250s</span>
          </div>
          <div class="metadata-item">
            <span class="metadata-label">ISO</span>
            <span class="metadata-value" id="metadataISO">400</span>
          </div>
        </div>

        <div class="metadata-section copyright-section">
          <div class="metadata-item">
            <span class="metadata-label">Copyright</span>
            <span class="metadata-value">© {currentYear} Shreyan Sengupta.<br>All rights reserved.</span>
          </div>
          <div class="metadata-item">
            <span class="metadata-label">Usage Rights</span>
            <span class="metadata-value">Text and data mining not permitted</span>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Pass gallery data to client-side -->
  <script type="application/json" id="gallery-data" is:inline set:html={JSON.stringify(galleryItems)}></script>

  <script>
    // Extend Window interface for TypeScript
    declare global {
      interface Window {
        galleryData: any[];
      }
    }

    // Development-only logging wrapper
    const isDev = import.meta.env.DEV;
    const devLog = (...args: any[]) => {
      if (isDev) console.log(...args);
    };
    const devError = (...args: any[]) => {
      if (isDev) console.error(...args);
    };

    // Theme management
    function initTheme() {
      const themeToggle = document.getElementById('themeToggle');
      const root = document.documentElement;

      devLog('Theme system initializing...');

      // Apply theme function
      function applyTheme(theme: string) {
        devLog('Applying theme:', theme);

        // Toggle theme class and inline styles for instant switching
        if (theme === 'light') {
          root.classList.add('light-theme');
          root.style.backgroundColor = '#ffffff';
          root.style.color = '#000000';
        } else {
          root.classList.remove('light-theme');
          root.style.backgroundColor = '#000000';
          root.style.color = '#ffffff';
        }

        // Update Instagram link based on theme
        const instagramLink = document.getElementById('instagramLink') as HTMLAnchorElement;
        if (instagramLink) {
          if (theme === 'dark') {
            instagramLink.href = 'https://www.instagram.com/noir.kiln/';
            instagramLink.setAttribute('aria-label', 'Visit @noir.kiln on Instagram');
          } else {
            instagramLink.href = 'https://www.instagram.com/rigeveryday/';
            instagramLink.setAttribute('aria-label', 'Visit @rigeveryday on Instagram');
          }
        }

        localStorage.setItem('theme', theme);
        devLog('Theme applied successfully:', theme);
      }

      // Get saved theme or default to dark (with validation)
      const rawTheme = localStorage.getItem('theme');
      const validThemes = ['light', 'dark'];
      const savedTheme = (rawTheme && validThemes.includes(rawTheme)) ? rawTheme : 'dark';
      devLog('Saved theme:', savedTheme);
      applyTheme(savedTheme);

      // Theme toggle event - fast and responsive
      if (themeToggle) {
        let currentTheme = savedTheme;
        let isToggling = false;

        themeToggle.addEventListener('click', (e) => {
          e.preventDefault();

          // Prevent rapid clicking (debounce)
          if (isToggling) return;
          isToggling = true;

          devLog('Theme toggle clicked, current theme:', currentTheme);

          const nextTheme = currentTheme === 'light' ? 'dark' : 'light';
          devLog('Switching to:', nextTheme);

          // Animate the current icon disappearing
          const currentIcon = themeToggle.querySelector('.light-icon, .dark-icon:not([style*="display: none"])');
          const currentPath = currentIcon?.querySelector('path');

          if (currentPath) {
            // Clear any existing animation
            (currentPath as unknown as HTMLElement).style.animation = 'none';
            void themeToggle.offsetWidth; // Force reflow

            // Pure squeeze exit animation - faster
            (currentPath as unknown as HTMLElement).style.animation = `exitIconAnimation 0.3s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards`;

            devLog(`Playing exitIconAnimation (squeeze) on current icon`);
          }

          // Apply theme quickly
          setTimeout(() => {
            currentTheme = nextTheme;
            applyTheme(currentTheme);

            // Animate the new icon appearing immediately
            setTimeout(() => {
              const newIcon = themeToggle.querySelector('.light-icon, .dark-icon:not([style*="display: none"])');
              const newPath = newIcon?.querySelector('path');

              if (newPath) {
                (newPath as unknown as HTMLElement).style.animation = 'enterIconAnimation 0.3s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards';
                devLog('New icon appearing with enterIconAnimation (squeeze)');
              }
            }, 20);
          }, 150);

          // Reset debounce - allow clicking again once animation completes
          setTimeout(() => {
            isToggling = false;
          }, 500);
        });
        devLog('Theme toggle event listener added');
      } else {
        devError('Theme toggle button not found!');
      }
    }

    document.addEventListener('DOMContentLoaded', function() {
      // Load gallery data from JSON script tag
      const galleryDataScript = document.getElementById('gallery-data');
      window.galleryData = galleryDataScript ? JSON.parse(galleryDataScript.textContent || '[]') : [];

      initTheme();

      // Progressive Image Loading with Intersection Observer
      let imageObserver: IntersectionObserver; // Declare in broader scope

      function initImageLoading() {
        imageObserver = new IntersectionObserver((entries, observer) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              const img = entry.target as HTMLImageElement;
              const container = img.closest('.gallery-item') as HTMLElement;

              // Load the image using improved loading logic
              const dataSrc = img.dataset.src;
              if (dataSrc) {
                // Use requestIdleCallback for non-blocking image loading
                const loadImage = () => {
                  const tempImg = new Image();
                  tempImg.onload = () => {
                    img.src = dataSrc;
                    img.classList.add('loaded');
                    if (container) {
                      container.classList.add('loaded');
                    }
                    devLog('Lazy loaded image:', dataSrc);
                  };
                  tempImg.onerror = () => {
                    img.classList.add('loaded'); // Still fade in to avoid blank space
                    if (container) {
                      container.classList.add('loaded');
                    }
                    devError('Failed to load image:', dataSrc);
                  };
                  tempImg.src = dataSrc;
                  img.removeAttribute('data-src');
                  observer.unobserve(img);
                };

                if ('requestIdleCallback' in window) {
                  requestIdleCallback(loadImage);
                } else {
                  setTimeout(loadImage, 0);
                }
              }
            }
          });
        }, {
          // Load images when they're 150px from entering the viewport
          rootMargin: '150px',
          threshold: 0.01
        });

        // Observe all lazy-load images
        const lazyImages = document.querySelectorAll('img.lazy-load');
        lazyImages.forEach(img => {
          imageObserver.observe(img);
        });

        devLog('Image loading observer initialized for', lazyImages.length, 'images');
      }

      // Initialize progressive loading
      initImageLoading();

      // Utrecht time display
      function updateUtrechtTime() {
        try {
          const now = new Date();

          const timeString = now.toLocaleTimeString('en-US', {
            timeZone: "Europe/Amsterdam",
            hour12: false,
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
          });

          const timeElement = document.getElementById('timeDisplay');
          if (timeElement) {
            // Split time string to wrap seconds in a span for dramatic effect
            const timeParts = timeString.split(':');
            if (timeParts.length === 3 && timeParts[2] !== undefined) {
              // Safely create elements to avoid XSS
              timeElement.textContent = '';
              const hoursText = document.createTextNode(`${timeParts[0]}:${timeParts[1]}:`);
              const secondsSpan = document.createElement('span');
              secondsSpan.className = 'time-seconds';
              secondsSpan.textContent = timeParts[2];
              timeElement.appendChild(hoursText);
              timeElement.appendChild(secondsSpan);
            } else {
              timeElement.textContent = timeString;
            }
          } else {
            devError('timeDisplay element not found');
          }
        } catch (error) {
          devError('Error updating Utrecht time:', error);
          // Fallback to simple time display
          const timeElement = document.getElementById('timeDisplay');
          if (timeElement) {
            const now = new Date();
            const simpleTime = now.toTimeString().split(' ')[0] || '00:00:00';
            const timeParts = simpleTime.split(':');
            if (timeParts.length === 3 && timeParts[2] !== undefined) {
              // Safely create elements to avoid XSS
              timeElement.textContent = '';
              const hoursText = document.createTextNode(`${timeParts[0]}:${timeParts[1]}:`);
              const secondsSpan = document.createElement('span');
              secondsSpan.className = 'time-seconds';
              secondsSpan.textContent = timeParts[2];
              timeElement.appendChild(hoursText);
              timeElement.appendChild(secondsSpan);
            } else {
              timeElement.textContent = simpleTime;
            }
          }
        }
      }

      // Update time immediately and then every second
      updateUtrechtTime();
      setInterval(updateUtrechtTime, 1000);

      // Dynamic filter sorting based on photo counts
      function sortFiltersByPhotoCount() {
        const galleryItems = document.querySelectorAll('.gallery-item');
        const filterContainer = document.querySelector('.floating-filter');
        const filterTabs = document.querySelectorAll('.filter-tab');

        // Count photos in each category
        const categoryCounts: { [key: string]: number } = {};

        // Initialize all categories with 0 count
        filterTabs.forEach(tab => {
          const filterValue = tab.getAttribute('data-filter');
          if (filterValue && filterValue !== 'all') {
            categoryCounts[filterValue] = 0;
          }
        });

        // Count actual photos in each category
        galleryItems.forEach(item => {
          const category = item.getAttribute('data-category');
          if (category && category in categoryCounts) {
            const count = categoryCounts[category];
            if (count !== undefined) {
              categoryCounts[category] = count + 1;
            }
          }
        });

        // Sort categories by count (descending)
        const sortedCategories = Object.entries(categoryCounts)
          .sort(([,a], [,b]) => (b as number) - (a as number))
          .map(([category]) => category);

        // Get tabs to sort (excluding "All" tab)
        const tabsToSort = Array.from(filterTabs).filter(tab =>
          tab.getAttribute('data-filter') !== 'all'
        );

        // Remove all tabs except "All"
        tabsToSort.forEach(tab => tab.remove());

        // Re-add tabs in sorted order
        sortedCategories.forEach(categoryValue => {
          const matchingTab = tabsToSort.find(tab =>
            tab.getAttribute('data-filter') === categoryValue
          );
          if (matchingTab && filterContainer) {
            filterContainer.appendChild(matchingTab);
          }
        });

        devLog('Filter tabs sorted by photo count:', categoryCounts);
      }

      // Apply dynamic sorting
      sortFiltersByPhotoCount();

      // Note: CSS columns layout automatically creates the masonry effect

      // Gallery and filter functionality
      const filterTabs = document.querySelectorAll('.filter-tab');
      const galleryItems = document.querySelectorAll('.gallery-item');

      // Lightbox elements
      const lightbox = document.getElementById('lightbox');
      const lightboxImage = document.getElementById('lightboxImage');
      const lightboxClose = document.getElementById('lightboxClose');
      const lightboxPrev = document.getElementById('lightboxPrev');
      const lightboxNext = document.getElementById('lightboxNext');

      // Metadata elements
      const metadataFileNumber = document.getElementById('metadataFileNumber');
      const metadataCategoryValue = document.getElementById('metadataCategoryValue');
      const metadataCamera = document.getElementById('metadataCamera');
      const metadataLens = document.getElementById('metadataLens');
      const metadataFocalLength = document.getElementById('metadataFocalLength');
      const metadataAperture = document.getElementById('metadataAperture');
      const metadataShutterSpeed = document.getElementById('metadataShutterSpeed');
      const metadataISO = document.getElementById('metadataISO');

      let currentImageIndex = 0;
      let visibleItems = [...galleryItems];


      // Filter functionality
      filterTabs.forEach(tab => {
        tab.addEventListener('click', () => {
          filterTabs.forEach(t => t.classList.remove('active'));
          tab.classList.add('active');

          const filterValue = tab.getAttribute('data-filter');
          visibleItems = [];

          if (filterValue === 'all') {
            // For "All" filter, show only items with category="all" (these are already deduplicated)
            devLog('Starting "All" filter - showing dedicated "all" category items');

            galleryItems.forEach((item) => {
              const itemCategory = item.getAttribute('data-category');

              if (itemCategory === 'all') {
                item.classList.remove('hidden');
                visibleItems.push(item);
                devLog('Showing "all" category item:', item.getAttribute('data-href'));
              } else {
                item.classList.add('hidden');
              }
            });
          } else {
            // For specific category filters, show all items in that category
            galleryItems.forEach((item) => {
              const itemCategory = item.getAttribute('data-category');

              if (itemCategory === filterValue) {
                item.classList.remove('hidden');
                visibleItems.push(item);
                // Remove animation delays to prevent blinking
                (item as HTMLElement).style.animation = 'none';
                (item as HTMLElement).offsetHeight;
                (item as HTMLElement).style.animation = 'fadeInScale 0.6s ease-out';
              } else {
                item.classList.add('hidden');
              }
            });
          }

          // Reinitialize image loading for newly visible images
          setTimeout(() => {
            observeNewImages();
          }, 100);
        });
      });

      // Lightbox functionality
      function openLightbox(index: number) {
        const item = visibleItems[index];
        if (!item) return;

        const img = item.querySelector('img') as HTMLImageElement;
        const titleElement = item.querySelector('h3');
        const title = titleElement ? titleElement.textContent || '' : '';

        currentImageIndex = index;

        // Get image source from data-href instead of relying on lazy-loaded src
        const itemHref = item.getAttribute('data-href');

        if (lightboxImage && itemHref) {
          // Always use the data-href as the source of truth for lightbox images
          (lightboxImage as HTMLImageElement).src = itemHref;
          (lightboxImage as HTMLImageElement).alt = img.alt || title;

          // Add loading indicator
          lightboxImage.style.opacity = '0.5';

          // Handle image load completion
          const handleImageLoad = () => {
            lightboxImage.style.opacity = '1';
            lightboxImage.removeEventListener('load', handleImageLoad);
            lightboxImage.removeEventListener('error', handleImageError);
          };

          // Handle image load error
          const handleImageError = () => {
            console.warn('Failed to load lightbox image:', itemHref);
            lightboxImage.style.opacity = '1';
            lightboxImage.removeEventListener('load', handleImageLoad);
            lightboxImage.removeEventListener('error', handleImageError);
          };

          lightboxImage.addEventListener('load', handleImageLoad);
          lightboxImage.addEventListener('error', handleImageError);

          // Preload adjacent images for smoother navigation (optimized for mobile)
          setTimeout(() => {
            // Check if user is on mobile or has slow connection
            const isMobile = window.innerWidth <= 768;
            const isSlowConnection = 'connection' in navigator &&
              (navigator.connection as any)?.effectiveType &&
              ['slow-2g', '2g', '3g'].includes((navigator.connection as any).effectiveType);

            // Only preload on desktop with good connection to save bandwidth
            if (!isMobile && !isSlowConnection) {
              const nextIndex = (index + 1) % visibleItems.length;

              // Preload next image only (most likely to be viewed)
              if (visibleItems[nextIndex]) {
                const nextHref = visibleItems[nextIndex].getAttribute('data-href');
                if (nextHref) {
                  const preloadNext = new Image();
                  preloadNext.src = nextHref;
                }
              }
            }
          }, 1000); // Longer delay to prioritize current image loading
        }

        // Get real metadata from gallery item (reuse itemHref from above)
        const galleryItemData = window.galleryData.find((galleryItem: any) => galleryItem.href === itemHref);

        // Set file number - extract just the number from the label
        if (metadataFileNumber && galleryItemData) {
          const label = galleryItemData.label || title;
          // Extract the number from labels like "IMG 8413", "DSC02870", etc.
          const cleanNumber = label.replace(/^(DSC_?|IMG_?|DSCF_?|DSCN_?|[A-Z]{2,}_?)\s*/, '').replace(/[-_\s]/g, '');
          metadataFileNumber.textContent = cleanNumber;
        }

        // Set category value in metadata section
        if (metadataCategoryValue && galleryItemData) {
          const categoryLabel = galleryItemData.category || 'All';
          // Capitalize first letter for display
          metadataCategoryValue.textContent = categoryLabel.charAt(0).toUpperCase() + categoryLabel.slice(1);
        }

        if (galleryItemData && galleryItemData.metadata) {
          const metadata = galleryItemData.metadata;
          if (metadataCamera) metadataCamera.textContent = metadata.camera;
          if (metadataLens) metadataLens.textContent = metadata.lens;
          if (metadataFocalLength) metadataFocalLength.textContent = metadata.focalLength;
          if (metadataAperture) metadataAperture.textContent = metadata.aperture;
          if (metadataShutterSpeed) metadataShutterSpeed.textContent = metadata.shutterSpeed;
          if (metadataISO) metadataISO.textContent = metadata.iso;
        } else {
          // Fallback to default values if metadata not found
          if (metadataCamera) metadataCamera.textContent = 'Unknown Camera';
          if (metadataLens) metadataLens.textContent = 'Unknown Lens';
          if (metadataFocalLength) metadataFocalLength.textContent = 'Unknown';
          if (metadataAperture) metadataAperture.textContent = 'Unknown';
          if (metadataShutterSpeed) metadataShutterSpeed.textContent = 'Unknown';
          if (metadataISO) metadataISO.textContent = 'Unknown';
        }

        // Handle description/notes section
        const descriptionSection = document.getElementById('descriptionSection');
        const descriptionTitle = document.getElementById('descriptionTitle');
        const descriptionCaption = document.getElementById('descriptionCaption');

        if (galleryItemData && galleryItemData.description && descriptionSection && descriptionTitle && descriptionCaption) {
          descriptionTitle.textContent = galleryItemData.description.title;
          descriptionCaption.textContent = galleryItemData.description.caption;
          descriptionSection.style.display = 'block';
        } else if (descriptionSection) {
          descriptionSection.style.display = 'none';
        }

        if (lightbox) {
          lightbox.classList.add('active');
        }
        document.body.style.overflow = 'hidden';
      }

      function closeLightbox() {
        if (lightbox) {
          lightbox.classList.remove('active');
        }
        document.body.style.overflow = 'auto';
      }

      function navigateLightbox(direction: string) {
        if (direction === 'next') {
          currentImageIndex = (currentImageIndex + 1) % visibleItems.length;
        } else {
          currentImageIndex = (currentImageIndex - 1 + visibleItems.length) % visibleItems.length;
        }
        openLightbox(currentImageIndex);
      }

      // Event listeners
      galleryItems.forEach((item) => {
        item.addEventListener('click', () => {
          const visibleIndex = visibleItems.indexOf(item);
          if (visibleIndex !== -1) {
            openLightbox(visibleIndex);
          }
        });
      });

      if (lightboxClose) {
        lightboxClose.addEventListener('click', closeLightbox);
      }
      if (lightboxPrev) {
        lightboxPrev.addEventListener('click', () => navigateLightbox('prev'));
      }
      if (lightboxNext) {
        lightboxNext.addEventListener('click', () => navigateLightbox('next'));
      }

      // Close lightbox on outside click
      if (lightbox) {
        lightbox.addEventListener('click', (e) => {
          if (e.target === lightbox) {
            closeLightbox();
          }
        });
      }

      // Keyboard navigation
      document.addEventListener('keydown', (e) => {
        if (lightbox && lightbox.classList.contains('active')) {
          if (e.key === 'Escape') {
            closeLightbox();
          } else if (e.key === 'ArrowLeft') {
            navigateLightbox('prev');
          } else if (e.key === 'ArrowRight') {
            navigateLightbox('next');
          }
        }
      });

      // Hybrid shuffle: Smart distribution with Fisher-Yates randomization
      // Keeps similar file numbers far apart (priority) while adding random variation
      function smartShuffleByFileNumber(items: Element[]): Element[] {
        // Extract file numbers from labels
        function extractFileNumber(item: Element): number {
          const img = item.querySelector('img');
          const label = img?.alt || '';
          // Match common patterns like "IMG 8413", "DSC02870", "IMG_4127", "DSC 08799"
          const match = label.match(/(\d+)/);
          return match?.[1] ? parseInt(match[1], 10) : 0;
        }

        // Create array with file numbers
        const photosWithNumbers = items.map(item => ({
          item,
          fileNumber: extractFileNumber(item)
        }));

        // Sort by file number
        photosWithNumbers.sort((a, b) => a.fileNumber - b.fileNumber);

        // Add controlled randomness: shuffle within small adjacent groups
        // This maintains distance between similar numbers while adding variety
        const groupSize = Math.max(3, Math.floor(photosWithNumbers.length / 20));
        for (let i = 0; i < photosWithNumbers.length; i += groupSize) {
          const groupEnd = Math.min(i + groupSize, photosWithNumbers.length);
          const group = photosWithNumbers.slice(i, groupEnd);

          // Fisher-Yates shuffle within the small group
          for (let j = group.length - 1; j > 0; j--) {
            const k = Math.floor(Math.random() * (j + 1));
            [group[j]!, group[k]!] = [group[k]!, group[j]!];
          }

          // Put shuffled group back
          for (let j = 0; j < group.length; j++) {
            photosWithNumbers[i + j] = group[j]!;
          }
        }

        // Interleaved distribution algorithm with randomized step
        // This spreads out consecutive numbers maximally
        const result = new Array(items.length);
        const baseStep = Math.ceil(Math.sqrt(items.length));

        // Add random variation to starting position
        let resultIndex = Math.floor(Math.random() * Math.min(baseStep, items.length));
        let sourceIndex = 0;

        // First pass: distribute with randomized step size
        while (sourceIndex < photosWithNumbers.length) {
          if (resultIndex >= result.length) {
            // Wrap around and find next empty slot
            resultIndex = result.findIndex((item: any) => item === undefined);
            if (resultIndex === -1) break;
          }

          if (result[resultIndex] === undefined) {
            result[resultIndex] = photosWithNumbers[sourceIndex]!.item;
            sourceIndex++;
          }

          // Add random variation to step size (±20% of base step)
          const stepVariation = Math.floor(baseStep * 0.2);
          const randomizedStep = baseStep + Math.floor(Math.random() * (stepVariation * 2 + 1)) - stepVariation;
          resultIndex += Math.max(1, randomizedStep);
        }

        // Fill remaining gaps with Fisher-Yates-style random placement
        let remainingIndices = result
          .map((item, idx) => item === undefined ? idx : -1)
          .filter(idx => idx !== -1);

        while (remainingIndices.length > 0 && sourceIndex < photosWithNumbers.length) {
          // Randomly select from available positions
          const randomIdx = Math.floor(Math.random() * remainingIndices.length);
          const targetIdx = remainingIndices[randomIdx]!;

          result[targetIdx] = photosWithNumbers[sourceIndex]!.item;
          sourceIndex++;
          remainingIndices.splice(randomIdx, 1);
        }

        devLog('🔀 Hybrid shuffle applied:', items.length, 'photos (smart distribution + random variation)');
        devLog('   File number range:', photosWithNumbers[0]?.fileNumber, '-', photosWithNumbers[photosWithNumbers.length - 1]?.fileNumber);
        devLog('   Base step:', baseStep, '(with ±20% random variation)');
        devLog('   Group shuffle size:', groupSize);

        const filteredResult = result.filter((item: any) => item !== undefined) as Element[];

        // Post-process: Create brickwork layout by distributing portraits optimally
        // Ensures vertical photos mix and match with horizontal/square photos
        function createBrickworkLayout(shuffled: Element[]): Element[] {
          const columnCount = window.innerWidth <= 768 ? 2 : 3; // Match CSS breakpoint

          function isPortrait(item: Element): boolean {
            const orientation = item.getAttribute('data-orientation');
            return orientation === 'portrait';
          }

          function isLandscape(item: Element): boolean {
            const orientation = item.getAttribute('data-orientation');
            return orientation === 'landscape' || orientation === 'square';
          }

          let swapCount = 0;

          // Strategy: Create alternating pattern for balanced brickwork
          // Pass 1: Break up consecutive portraits (no 2+ portraits side by side)
          for (let i = 0; i < shuffled.length - columnCount + 1; i++) {
            const consecutiveGroup = shuffled.slice(i, i + columnCount);
            const portraitCount = consecutiveGroup.filter(isPortrait).length;

            // If we have 2+ portraits in a row, redistribute
            if (portraitCount >= 2) {
              // Find the second portrait in the group
              let portraitsSeen = 0;
              for (let k = 0; k < consecutiveGroup.length; k++) {
                const groupItem = consecutiveGroup[k];
                if (groupItem && isPortrait(groupItem)) {
                  portraitsSeen++;
                  if (portraitsSeen >= 2) {
                    const swapIdx = i + k;
                    // Find a landscape photo further down to swap with
                    for (let j = i + columnCount; j < shuffled.length; j++) {
                      const targetItem = shuffled[j];
                      if (targetItem && isLandscape(targetItem)) {
                        [shuffled[swapIdx]!, shuffled[j]!] = [shuffled[j]!, shuffled[swapIdx]!];
                        swapCount++;
                        devLog(`🧱 Brickwork swap: portrait at ${swapIdx} ↔ landscape at ${j}`);
                        break;
                      }
                    }
                    break;
                  }
                }
              }
            }
          }

          // Pass 2: Ensure better vertical distribution (across columns)
          // Check every Nth position (same column) to avoid vertical stacking
          for (let col = 0; col < columnCount; col++) {
            let consecutivePortraitsInColumn = 0;
            for (let row = 0; row * columnCount + col < shuffled.length; row++) {
              const idx = row * columnCount + col;
              if (idx >= shuffled.length) break;

              const currentItem = shuffled[idx];
              if (currentItem && isPortrait(currentItem)) {
                consecutivePortraitsInColumn++;
                // If we have 2+ portraits vertically in the same column, swap one out
                if (consecutivePortraitsInColumn >= 2) {
                  // Find a landscape photo to swap with
                  for (let j = idx + 1; j < Math.min(idx + columnCount * 3, shuffled.length); j++) {
                    const swapItem = shuffled[j];
                    if (swapItem && isLandscape(swapItem)) {
                      [shuffled[idx]!, shuffled[j]!] = [shuffled[j]!, shuffled[idx]!];
                      swapCount++;
                      consecutivePortraitsInColumn = 0;
                      devLog(`🧱 Vertical distribution: portrait at ${idx} ↔ landscape at ${j}`);
                      break;
                    }
                  }
                }
              } else {
                consecutivePortraitsInColumn = 0;
              }
            }
          }

          devLog(`✅ Brickwork layout created: ${swapCount} optimizations for balanced distribution`);
          return shuffled;
        }

        const finalResult = createBrickworkLayout(filteredResult);
        devLog('🧱 Portrait distribution optimized for brickwork pattern');

        return finalResult;
      }

      function shuffleGallery() {
        devLog('Shuffling gallery...');

        // Get the gallery container
        const galleryGrid = document.querySelector('.gallery-grid');
        if (!galleryGrid) return;

        // Smart shuffle the visible items array to keep similar numbers far apart
        const shuffledItems = smartShuffleByFileNumber(visibleItems);

        // Re-append items to the DOM in the shuffled order
        shuffledItems.forEach((item) => {
          if (item.parentElement === galleryGrid) {
            galleryGrid.appendChild(item);
          }
        });

        // Update the visibleItems array to reflect the new order
        visibleItems = shuffledItems;

        // Add a subtle animation to show the shuffle happened
        shuffledItems.forEach((item, index) => {
          (item as HTMLElement).style.animation = 'none';
          (item as HTMLElement).offsetHeight; // Trigger reflow
          (item as HTMLElement).style.animation = `fadeInScale 0.4s ease-out ${index * 0.01}s`;
        });

        devLog('Gallery shuffled with', visibleItems.length, 'visible items');
      }

      // Shuffle button event listener
      const shuffleButton = document.getElementById('shuffleButton');
      if (shuffleButton) {
        shuffleButton.addEventListener('click', () => {
          // Add bubbling class for bubble animation
          shuffleButton.classList.add('bubbling');
          const circles = shuffleButton.querySelectorAll('circle');

          devLog('Shuffle clicked! Found', circles.length, 'circles');

          // First, clear any existing animations to allow re-triggering
          circles.forEach(circle => {
            (circle as unknown as HTMLElement).style.animation = 'none';
          });

          // Force a reflow to restart the animation
          void shuffleButton.offsetWidth;

          // Apply random bubble animations to each circle
          circles.forEach((circle, index) => {
            const animationName = `bubble${(index % 7) + 1}`;
            const delay = Math.random() * 0.1;
            const duration = 0.8 + Math.random() * 0.2; // Full cycle duration

            const animationString = `${animationName} ${duration}s ease-in-out ${delay}s`;
            (circle as unknown as HTMLElement).style.animation = animationString;

            devLog(`Circle ${index}: applying animation "${animationString}"`);
          });

          // Trigger the shuffle
          shuffleGallery();

          // Remove bubbling class after animation completes
          setTimeout(() => {
            shuffleButton.classList.remove('bubbling');
            devLog('Bubble animation complete');
          }, 1100); // Time for animation to complete
        });
      }


      // Image protection helper function
      function protectImage(img: HTMLElement) {
        img.addEventListener('contextmenu', e => e.preventDefault());
        img.addEventListener('dragstart', e => e.preventDefault());
        img.style.userSelect = 'none';
        (img as any).style.webkitUserSelect = 'none';
        (img as any).style.mozUserSelect = 'none';
        (img as any).style.msUserSelect = 'none';
        (img as any).style.webkitTouchCallout = 'none';
        (img as any).style.webkitUserDrag = 'none';
        (img as any).style.khtmlUserDrag = 'none';
        (img as any).style.mozUserDrag = 'none';
        (img as any).style.oUserDrag = 'none';

        // Mobile protection
        img.addEventListener('touchstart', (e: any) => {
          if (e.touches && e.touches.length > 1) e.preventDefault();
        });
        img.addEventListener('touchmove', (e: any) => {
          if (e.touches && e.touches.length > 1) e.preventDefault();
        });

        // Prevent long press
        img.addEventListener('touchstart', (e) => {
          let timer = setTimeout(() => e.preventDefault(), 500);
          img.addEventListener('touchend', () => clearTimeout(timer), { once: true });
          img.addEventListener('touchmove', () => clearTimeout(timer), { once: true });
        });
      }

      // Apply image protection
      document.querySelectorAll('.gallery-item img').forEach(img => protectImage(img as HTMLElement));
      const lightboxImg = document.getElementById('lightboxImage');
      if (lightboxImg) protectImage(lightboxImg);

      // Additional global mobile security measures
      // Prevent zoom on double tap for gallery container
      const galleryGrid = document.querySelector('.gallery-grid');
      if (galleryGrid) {
        galleryGrid.addEventListener('touchstart', (e: any) => {
          if (e.touches && e.touches.length > 1) {
            e.preventDefault();
          }
        });
      }

      // Image protection - only prevent Ctrl+S to avoid interfering with legitimate browser functionality
      document.addEventListener('keydown', (e) => {
        // Prevent Ctrl+S, Ctrl+Shift+S (save) - basic image protection
        if ((e.ctrlKey || e.metaKey) && (e.key === 's' || e.key === 'S')) {
          e.preventDefault();
        }
      });

      // Mobile touch gesture support for lightbox navigation
      let touchStartX = 0;
      let touchEndX = 0;
      const minSwipeDistance = 50;

      function handleSwipeGesture() {
        const swipeDistance = touchEndX - touchStartX;
        if (Math.abs(swipeDistance) > minSwipeDistance) {
          if (swipeDistance > 0) {
            // Swipe right - previous image
            navigateLightbox('prev');
          } else {
            // Swipe left - next image
            navigateLightbox('next');
          }
        }
      }

      if (lightbox) {
        lightbox.addEventListener('touchstart', (e) => {
          if (lightbox.classList.contains('active')) {
            touchStartX = e.changedTouches[0]?.screenX || 0;
          }
        });

        lightbox.addEventListener('touchend', (e) => {
          if (lightbox.classList.contains('active')) {
            touchEndX = e.changedTouches[0]?.screenX || 0;
            handleSwipeGesture();
          }
        });
      }

      // Mobile viewport meta tag optimization
      const metaViewport = document.querySelector('meta[name="viewport"]');
      if (metaViewport) {
        metaViewport.setAttribute('content', 'width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no');
      }

      // Advanced Performance Optimizations

      // 1. Critical Image Preloading with Progressive Enhancement (Mobile-Optimized)
      function preloadCriticalImages() {
        // Check device and connection before aggressive preloading
        const isMobile = window.innerWidth <= 768;
        const isSlowConnection = 'connection' in navigator &&
          (navigator.connection as any)?.effectiveType &&
          ['slow-2g', '2g', '3g'].includes((navigator.connection as any).effectiveType);

        // Reduce preloading on mobile and slow connections
        const maxPreload = isMobile || isSlowConnection ? 4 : 8;
        const selector = `.gallery-item:nth-child(-n+${maxPreload}) img[data-src]`;
        const firstRowImages = document.querySelectorAll(selector);

        firstRowImages.forEach((img, index) => {
          const src = (img as HTMLImageElement).dataset.src;
          if (src) {
            // Longer delays on mobile to avoid blocking main thread
            const delay = (isMobile || isSlowConnection) ? index * 200 : index * 50;
            setTimeout(() => {
              const preloadLink = document.createElement('link');
              preloadLink.rel = 'preload';
              preloadLink.as = 'image';
              preloadLink.href = src;
              preloadLink.setAttribute('fetchpriority', index < 2 ? 'high' : 'low');
              document.head.appendChild(preloadLink);
            }, delay);
          }
        });
      }

      // Enhanced Font Loading Optimization
      function optimizeFontLoading() {
        // Preload system fonts to eliminate layout shift
        const style = document.createElement('style');
        style.textContent = `
          @font-face {
            font-family: 'system-ui-fallback';
            src: local('system-ui'), local('-apple-system'), local('BlinkMacSystemFont');
            font-display: block;
          }
        `;
        document.head.appendChild(style);
      }

      // Helper function to observe new images (for filtering)
      function observeNewImages() {
        if (!imageObserver) return;

        const newLazyImages = document.querySelectorAll('img.lazy-load:not([data-observed])');
        newLazyImages.forEach(img => {
          imageObserver.observe(img);
          img.setAttribute('data-observed', 'true');
        });

        devLog('Observing', newLazyImages.length, 'new images');
      }

      // 3. Virtual Scrolling for Better Performance
      let visibleItemsSet = new Set();

      function optimizeVisibleItems() {
        // const scrollTop = window.pageYOffset;
        const windowHeight = window.innerHeight;
        const items = document.querySelectorAll('.gallery-item');

        items.forEach((item, index) => {
          const rect = (item as HTMLElement).getBoundingClientRect();
          const isInViewport = (
            rect.top < windowHeight + 200 &&
            rect.bottom > -200
          );

          if (isInViewport && !visibleItemsSet.has(index)) {
            visibleItemsSet.add(index);
            (item as HTMLElement).style.visibility = 'visible';
          } else if (!isInViewport && visibleItemsSet.has(index)) {
            visibleItemsSet.delete(index);
          }
        });
      }

      // 4. Debounced scroll optimization
      let scrollTimeout: ReturnType<typeof setTimeout>;
      function onOptimizedScroll() {
        clearTimeout(scrollTimeout);
        scrollTimeout = setTimeout(() => {
          optimizeVisibleItems();
        }, 16); // ~60fps
      }

      // Initialize performance optimizations
      optimizeFontLoading();
      preloadCriticalImages();

      // Add optimized scroll listener
      window.addEventListener('scroll', onOptimizedScroll, { passive: true });

      // 6. Prefetch next images on hover (Desktop-optimized)
      let prefetchTimeout: ReturnType<typeof setTimeout>;
      const isMobileDevice = window.innerWidth <= 768 || 'ontouchstart' in window;

      // Only enable hover prefetch on desktop with good connections
      if (!isMobileDevice) {
        const hasGoodConnection = !('connection' in navigator) ||
          !(navigator.connection as any)?.effectiveType ||
          !['slow-2g', '2g', '3g'].includes((navigator.connection as any).effectiveType);

        if (hasGoodConnection) {
          document.addEventListener('mouseover', (e) => {
            const galleryItem = (e.target as HTMLElement).closest('.gallery-item');
            if (galleryItem) {
              clearTimeout(prefetchTimeout);
              prefetchTimeout = setTimeout(() => {
                const nextItems = Array.from(document.querySelectorAll('.gallery-item')).slice(
                  Array.from(document.querySelectorAll('.gallery-item')).indexOf(galleryItem) + 1,
                  Array.from(document.querySelectorAll('.gallery-item')).indexOf(galleryItem) + 3
                );

                nextItems.forEach((item) => {
                  const img = item.querySelector('img[data-src]') as HTMLImageElement;
                  if (img && img.dataset.src) {
                    const preloadImg = new Image();
                    preloadImg.src = img.dataset.src;
                  }
                });
              }, 150);
            }
          });
        }
      }
    });
  </script>

  <!-- Consolidated optimized scripts -->
</Layout>